/* The following code was generated by JFlex 1.7.0 */

package com.hluther.lexer;
import com.hluther.gui.GifCreatorFrame;
import com.hluther.parser.PaintSym;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/helmuth/Documentos/Programas Desarrollados/NetBeansProjects/Java/Organizacion de Lenguajes y Compiladores 1/GifCreator/src/main/java/com/hluther/files/PaintFile.flex</tt>
 */
public class PaintFileLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\63\1\5\1\3\22\0\1\5\1\0\1\62"+
    "\5\0\1\17\1\20\1\13\1\11\1\10\1\12\1\21\1\14\12\2"+
    "\1\0\1\7\1\24\1\6\1\25\2\0\1\26\1\1\1\50\1\30"+
    "\1\51\3\1\1\43\4\1\1\27\1\31\1\42\1\1\1\32\1\46"+
    "\1\44\1\47\1\45\4\1\1\15\1\0\1\16\1\0\1\1\1\0"+
    "\1\60\1\56\2\1\1\35\1\34\1\55\1\41\1\33\2\1\1\36"+
    "\1\1\1\52\1\57\2\1\1\54\1\37\1\53\1\61\1\1\1\40"+
    "\3\1\1\22\1\0\1\23\7\0\1\63\u1fa2\0\1\63\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\14\2\1\1\1\25"+
    "\1\0\1\26\1\27\1\30\1\31\1\2\1\32\1\33"+
    "\12\2\4\0\1\34\1\35\11\2\1\36\1\37\1\0"+
    "\1\40\1\2\1\41\3\2\1\42\1\2\1\43\1\2"+
    "\1\40\1\44\1\45\4\2\1\46\1\2\1\47\2\2"+
    "\1\50\5\2\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\64\0\u0104\0\64"+
    "\0\64\0\64\0\64\0\64\0\u0138\0\64\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\u016c\0\u01a0\0\u01d4\0\u0208"+
    "\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0444\0\64\0\u0478\0\u04ac\0\64\0\64"+
    "\0\64\0\u04e0\0\150\0\150\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\150\0\150\0\u07ec\0\u0820\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\64\0\64\0\u09c0"+
    "\0\u0784\0\u09f4\0\150\0\u0a28\0\u0a5c\0\u0a90\0\150\0\u0ac4"+
    "\0\150\0\u0af8\0\64\0\150\0\150\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\150\0\u0bfc\0\150\0\u0c30\0\u0c64\0\150\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\2\3\1\30"+
    "\1\3\1\31\1\32\1\33\2\3\1\34\1\3\1\35"+
    "\1\36\1\3\1\37\1\40\4\3\1\41\2\3\1\42"+
    "\3\3\1\43\66\0\2\3\23\0\34\3\4\0\1\4"+
    "\65\0\1\6\65\0\1\44\70\0\1\45\1\46\55\0"+
    "\1\47\16\0\1\50\44\0\1\51\56\0\2\3\23\0"+
    "\1\3\1\52\32\3\3\0\2\3\23\0\4\3\1\53"+
    "\27\3\3\0\2\3\23\0\6\3\1\54\15\3\1\55"+
    "\7\3\3\0\2\3\23\0\32\3\1\56\1\3\3\0"+
    "\2\3\23\0\10\3\1\57\23\3\3\0\2\3\23\0"+
    "\13\3\1\60\20\3\3\0\2\3\23\0\15\3\1\61"+
    "\16\3\3\0\2\3\23\0\1\3\1\62\32\3\3\0"+
    "\2\3\23\0\1\63\33\3\3\0\2\3\23\0\25\3"+
    "\1\64\6\3\3\0\2\3\23\0\26\3\1\65\5\3"+
    "\3\0\2\3\23\0\31\3\1\66\2\3\2\0\1\67"+
    "\1\70\11\67\1\0\12\67\34\70\2\67\13\71\1\72"+
    "\1\0\47\71\4\46\1\0\57\46\1\0\2\3\23\0"+
    "\2\3\1\73\31\3\3\0\2\3\23\0\25\3\1\74"+
    "\6\3\3\0\2\3\23\0\10\3\1\75\23\3\3\0"+
    "\2\3\23\0\11\3\1\76\22\3\3\0\2\3\23\0"+
    "\5\3\1\77\26\3\3\0\2\3\23\0\1\3\1\100"+
    "\32\3\3\0\2\3\23\0\20\3\1\101\13\3\3\0"+
    "\2\3\23\0\4\3\1\102\27\3\3\0\2\3\23\0"+
    "\26\3\1\103\5\3\3\0\2\3\23\0\33\3\1\104"+
    "\3\0\2\3\23\0\31\3\1\105\2\3\2\0\62\67"+
    "\1\106\2\67\2\70\23\67\34\70\1\107\1\67\13\71"+
    "\1\110\63\71\1\110\1\111\47\71\1\0\2\3\23\0"+
    "\11\3\1\112\22\3\3\0\2\3\23\0\7\3\1\113"+
    "\24\3\3\0\2\3\23\0\10\3\1\114\23\3\3\0"+
    "\2\3\23\0\16\3\1\115\15\3\3\0\2\3\23\0"+
    "\16\3\1\116\15\3\3\0\2\3\23\0\20\3\1\117"+
    "\13\3\3\0\2\3\23\0\5\3\1\120\26\3\3\0"+
    "\2\3\23\0\7\3\1\121\24\3\3\0\2\3\23\0"+
    "\10\3\1\122\23\3\2\0\13\71\1\110\1\123\47\71"+
    "\1\0\2\3\23\0\7\3\1\124\24\3\3\0\2\3"+
    "\23\0\7\3\1\125\24\3\3\0\2\3\23\0\1\126"+
    "\33\3\3\0\2\3\23\0\4\3\1\127\27\3\3\0"+
    "\2\3\23\0\24\3\1\130\7\3\3\0\2\3\23\0"+
    "\7\3\1\131\24\3\3\0\2\3\23\0\4\3\1\132"+
    "\27\3\3\0\2\3\23\0\21\3\1\133\12\3\3\0"+
    "\2\3\23\0\27\3\1\134\4\3\3\0\2\3\23\0"+
    "\32\3\1\135\1\3\3\0\2\3\23\0\22\3\1\136"+
    "\11\3\3\0\2\3\23\0\24\3\1\137\7\3\3\0"+
    "\2\3\23\0\22\3\1\140\11\3\3\0\2\3\23\0"+
    "\15\3\1\141\16\3\3\0\2\3\23\0\3\3\1\142"+
    "\30\3\3\0\2\3\23\0\1\3\1\143\32\3\3\0"+
    "\2\3\23\0\23\3\1\144\10\3\3\0\2\3\23\0"+
    "\20\3\1\145\13\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\5\11\1\1\7\11"+
    "\17\1\1\11\1\0\1\1\3\11\15\1\4\0\13\1"+
    "\2\11\1\0\12\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private GifCreatorFrame gifCreatorFrame;
    private String errorLexeme; 
    private int line;
    private int column;

    public PaintFileLexer(java.io.Reader in, GifCreatorFrame gifCreatorFrame) {
        this.gifCreatorFrame = gifCreatorFrame;    
        this.zzReader = in;
        this.errorLexeme = "";
        line = -1;
        column = -1;
    }
        
    private Symbol symbol(int type, String value) {
        return new Symbol(type, yyline+1, yycolumn, value);
    }

    private Symbol symbol(int type, int value) {
        return new Symbol(type, yyline+1, yycolumn, value);
    }

    private Symbol symbol(int type, boolean value) {
        return new Symbol(type, yyline+1, yycolumn, value);
    }

    private void printToken(String token){
        System.out.println(token);
    }

    private void createErrorLexeme(String lexeme, int line, int column){
        if(this.line == -1 && this.column == -1){
            this.line = line;
            this.column = column;
        }
        errorLexeme = errorLexeme + lexeme;
    }

    private void printError(){
        if(line != -1 && column != -1){
            gifCreatorFrame.printError("Error Lexico -> Lexema ["+errorLexeme+"] no reconocido. Linea: "+line+" Columna: "+column, 3);
            errorLexeme = "";
            line = -1;
            column = -1;
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PaintFileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(PaintSym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { createErrorLexeme(new String(yytext()), (yyline+1), yycolumn);
            } 
            // fall through
          case 42: break;
          case 2: 
            { printToken("ID"); printError(); return symbol(PaintSym.ID, yytext());
            } 
            // fall through
          case 43: break;
          case 3: 
            { printToken("INTEGER"); printError(); return symbol(PaintSym.INTEGER, Integer.parseInt(yytext()));
            } 
            // fall through
          case 44: break;
          case 4: 
            { printError();
            } 
            // fall through
          case 45: break;
          case 5: 
            { printToken("EQUALS"); printError(); return symbol(PaintSym.EQUALS, new String("="));
            } 
            // fall through
          case 46: break;
          case 6: 
            { printToken("SEMICOLON"); printError(); return symbol(PaintSym.SEMICOLON, new String(";"));
            } 
            // fall through
          case 47: break;
          case 7: 
            { printToken("COMMA"); printError(); return symbol(PaintSym.COMMA, new String(","));
            } 
            // fall through
          case 48: break;
          case 8: 
            { printToken("PLUS"); printError(); return symbol(PaintSym.PLUS, new String("+"));
            } 
            // fall through
          case 49: break;
          case 9: 
            { printToken("MINUS"); printError(); return symbol(PaintSym.MINUS, new String("-"));
            } 
            // fall through
          case 50: break;
          case 10: 
            { printToken("MULTIPLICATION"); printError(); return symbol(PaintSym.MULTIPLICATION, new String("*"));
            } 
            // fall through
          case 51: break;
          case 11: 
            { printToken("DIVISION"); printError(); return symbol(PaintSym.DIVISION, new String("/"));
            } 
            // fall through
          case 52: break;
          case 12: 
            { printToken("SQUAREBRACKETO"); printError(); return symbol(PaintSym.SQUAREBRACKETO, new String("["));
            } 
            // fall through
          case 53: break;
          case 13: 
            { printToken("SQUAREBRACKETC"); printError(); return symbol(PaintSym.SQUAREBRACKETC, new String("]"));
            } 
            // fall through
          case 54: break;
          case 14: 
            { printToken("PARENTHESISO"); printError(); return symbol(PaintSym.PARENTHESISO, new String("("));
            } 
            // fall through
          case 55: break;
          case 15: 
            { printToken("PARENTHESISC"); printError(); return symbol(PaintSym.PARENTHESISC, new String("("));
            } 
            // fall through
          case 56: break;
          case 16: 
            { printToken("FULLSTOP"); printError(); return symbol(PaintSym.FULLSTOP, new String("."));
            } 
            // fall through
          case 57: break;
          case 17: 
            { printToken("CURLYBRACKETO"); printError(); return symbol(PaintSym.CURLYBRACKETO, new String("{"));
            } 
            // fall through
          case 58: break;
          case 18: 
            { printToken("CURLYBRACKETC"); printError(); return symbol(PaintSym.CURLYBRACKETC, new String("}"));
            } 
            // fall through
          case 59: break;
          case 19: 
            { printToken("LESSTHAN"); printError(); return symbol(PaintSym.LESSTHAN, new String("<"));
            } 
            // fall through
          case 60: break;
          case 20: 
            { printToken("MORETHAN"); printError(); return symbol(PaintSym.MORETHAN, new String(">"));
            } 
            // fall through
          case 61: break;
          case 21: 
            { printToken("COMPARATION"); printError(); return symbol(PaintSym.COMPARATION, new String("=="));
            } 
            // fall through
          case 62: break;
          case 22: 
            { printToken("LINECOMMENT"); printError();
            } 
            // fall through
          case 63: break;
          case 23: 
            { printToken("LESSEQUALSTHAN"); printError(); return symbol(PaintSym.LESSEQUALSTHAN, new String("<="));
            } 
            // fall through
          case 64: break;
          case 24: 
            { printToken("BETWEEN"); printError(); return symbol(PaintSym.BETWEEN, new String("<>"));
            } 
            // fall through
          case 65: break;
          case 25: 
            { printToken("MOREEQUALSTHAN"); printError(); return symbol(PaintSym.MOREEQUALSTHAN, new String(">="));
            } 
            // fall through
          case 66: break;
          case 26: 
            { printToken("OR"); printError(); return symbol(PaintSym.OR, new String("OR"));
            } 
            // fall through
          case 67: break;
          case 27: 
            { printToken("IF"); printError(); return symbol(PaintSym.IF, new String("if"));
            } 
            // fall through
          case 68: break;
          case 28: 
            { printToken("AND"); printError(); return symbol(PaintSym.AND, new String("AND"));
            } 
            // fall through
          case 69: break;
          case 29: 
            { printToken("INT"); printError(); return symbol(PaintSym.INT, new String("int"));
            } 
            // fall through
          case 70: break;
          case 30: 
            { printToken("STRINGLITERAL"); printError(); return symbol(PaintSym.STRINGLITERAL, yytext());
            } 
            // fall through
          case 71: break;
          case 31: 
            { printToken("IDLITERAL"); printError(); return symbol(PaintSym.IDLITERAL, yytext());
            } 
            // fall through
          case 72: break;
          case 32: 
            { printToken("MULTIPLELINECOMMENT"); printError();
            } 
            // fall through
          case 73: break;
          case 33: 
            { printToken("ELSE"); printError(); return symbol(PaintSym.ELSE, new String("else"));
            } 
            // fall through
          case 74: break;
          case 34: 
            { printToken("VARS"); printError(); return symbol(PaintSym.VARS, new String("VARS"));
            } 
            // fall through
          case 75: break;
          case 35: 
            { printToken("TRUE"); printError(); return symbol(PaintSym.TRUE, true);
            } 
            // fall through
          case 76: break;
          case 36: 
            { printToken("FALSE"); printError(); return symbol(PaintSym.FALSE, false);
            } 
            // fall through
          case 77: break;
          case 37: 
            { printToken("WHILE"); printError(); return symbol(PaintSym.WHILE, new String("while"));
            } 
            // fall through
          case 78: break;
          case 38: 
            { printToken("PAINT"); printError(); return symbol(PaintSym.PAINT, new String("PINTAR"));
            } 
            // fall through
          case 79: break;
          case 39: 
            { printToken("STRING"); printError(); return symbol(PaintSym.STRING, new String("String"));
            } 
            // fall through
          case 80: break;
          case 40: 
            { printToken("BOOLEAN"); printError(); return symbol(PaintSym.BOOLEAN, new String("boolean"));
            } 
            // fall through
          case 81: break;
          case 41: 
            { printToken("INSTRUCTIONS"); printError(); return symbol(PaintSym.INSTRUCTIONS, new String("INSTRUCCIONES"));
            } 
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = PaintSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PaintFileLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PaintFileLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PaintFileLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
