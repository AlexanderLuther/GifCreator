package com.hluther.parser;
import java_cup.runtime.*;
import com.hluther.gui.GifCreatorFrame;
import com.hluther.lexer.PaintFileLexer;
import com.hluther.controlClasses.PaintFileDriver;
import com.hluther.entityClasses.Canvas;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import com.hluther.AST.DeclarationAssignment;
import com.hluther.AST.Operation;
import com.hluther.AST.Instruction;
import com.hluther.AST.Declaration;
import com.hluther.AST.Symbol.Type;
import com.hluther.AST.Operation.OperationType;
import com.hluther.AST.Assignment;
import com.hluther.AST.CanvasInstructions;
import com.hluther.AST.PaintInstructions;
import com.hluther.AST.While;
import com.hluther.AST.If;
import com.hluther.AST.Paint;

parser code {:

    private GifCreatorFrame gifCreatorFrame;
    private PaintFileDriver paintFileDriver;
    private ArrayList<Canvas> canvases;
    
    public PaintFileParser(PaintFileLexer lexer, GifCreatorFrame gifCreatorFrame, PaintFileDriver paintFileDriver, ArrayList<Canvas> canvases) { 
        super(lexer);
        this.gifCreatorFrame = gifCreatorFrame;
        this.paintFileDriver = paintFileDriver;
        this.canvases = canvases;
    }

    public void syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    } 

    public void semanticError(String lexeme, int line, int column, int errorType){
        String msg = "";    
        switch(errorType){
            case 0:
                msg = "Error Semantico -> Ya existe una variable con el nombre ["+lexeme+"]. Linea: "+line+" Columna: "+column; 
            break;
            case 1:
                msg = "Error Semantico -> No existe ninguna variable con el nombre  ["+lexeme+"]. Imposible asignar un valor. Linea: "+line+" Columna: "+column; 
            break;
        }
        gifCreatorFrame.printError(msg, 3);
    }

:}

/* Terminals */
terminal String     ID, INT, STRING, BOOLEAN, STRINGLITERAL, IDLITERAL, EQUALS, SEMICOLON, COMMA, PLUS, MINUS, MULTIPLICATION, DIVISION, SQUAREBRACKETO, SQUAREBRACKETC, VARS, INSTRUCTIONS,
                    PARENTHESISO, PARENTHESISC, FULLSTOP, PAINT, WHILE, CURLYBRACKETO, CURLYBRACKETC, AND, OR, COMPARATION, IF, ELSE, LESSEQUALSTHAN, MOREEQUALSTHAN, MORETHAN,
                    LESSTHAN, BETWEEN;
terminal Integer    INTEGER;
terminal Boolean    TRUE, FALSE;

/* Non-terminals */
non terminal                            paintStart;
non terminal LinkedList<Instruction>    varStructure, vars, instruction, instructions;
non terminal Instruction                integerDeclaration, stringDeclaration, booleanDeclaration, stringAssigment, booleanAssigment, stringVarAssigment, booleanVarAssigment,
                                        integerOpAssigment, assignValues, logicalOp, loop, conditional, paint;
non terminal Operation                  booleanValue, stringValue, factor, term, operation, assignValue, integerValue, relationalOp, conditions, stringParam, intParam;

precedence left MULTIPLICATION, DIVISION;
precedence left PLUS, MINUS;

/* The grammar */
start with paintStart;

paintStart::=   varStructure:abstractSintaxTree {: paintFileDriver.executeAST(abstractSintaxTree); :}
                ;

varStructure::=     VARS SQUAREBRACKETO vars:varsList SQUAREBRACKETC instructions:instructionsList {: RESULT = new LinkedList<>(); RESULT.add(new PaintInstructions(varsList, instructionsList)); :}
                    ;
                

//------------------------------------  DECLARACION DE VARIABLES    ------------------------------------//
vars::=     INT integerDeclaration:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | STRING stringDeclaration:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | BOOLEAN booleanDeclaration:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :} 
            | STRING stringAssigment:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | BOOLEAN booleanAssigment:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | STRING stringVarAssigment:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | BOOLEAN booleanVarAssigment:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | INT integerDeclaration:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}
            | STRING stringDeclaration:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}
            | BOOLEAN booleanDeclaration:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}  
            | STRING stringAssigment:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}
            | BOOLEAN booleanAssigment:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}
            | STRING stringVarAssigment:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}
            | BOOLEAN booleanVarAssigment:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :}
            | INT integerOpAssigment:inst SEMICOLON vars:instList {: RESULT = instList; RESULT.addLast(inst); :}
            | INT integerOpAssigment:inst SEMICOLON {: RESULT = new LinkedList<>(); RESULT.addLast(inst); :} 
            ;

integerOpAssigment::=   ID:id EQUALS operation:value {: RESULT = new DeclarationAssignment(id, value, Type.INT); :}
                        ;

stringVarAssigment::=   ID:id EQUALS ID:value {: RESULT = new DeclarationAssignment(id, new Operation(value, OperationType.ID), Type.STRING); :}
                        ;

booleanVarAssigment::=  ID:id EQUALS ID:value {: RESULT = new DeclarationAssignment(id, new Operation(value, OperationType.ID), Type.BOOLEAN); :}
                        ;

integerDeclaration::=   ID:id {: RESULT = new Declaration(id, Type.INT); :}
                        ;
 
stringDeclaration::=    ID:id {: RESULT = new Declaration(id, Type.STRING); :}
                        ;

booleanDeclaration::=   ID:id {: RESULT = new Declaration(id, Type.BOOLEAN); :}
                        ;

stringAssigment::=      ID:id EQUALS stringValue:value {: RESULT = new DeclarationAssignment(id, value, Type.STRING); :}
                        ;

stringValue::=  IDLITERAL:value {: RESULT = new Operation(value, OperationType.LITERAL); :}
                | STRINGLITERAL:value {: RESULT = new Operation(value, OperationType.LITERAL); :}
                ;

booleanAssigment::=     ID:id EQUALS booleanValue:value {: RESULT = new DeclarationAssignment(id, value, Type.BOOLEAN); :}
                        ;

booleanValue::=     TRUE:value {: RESULT = new Operation(value); :}
                    | FALSE:value {: RESULT = new Operation(value); :} 
                    ;


//------------------------------------  OPERACIONES ARITMETICAS    ------------------------------------//
operation::=    operation:value1 PLUS term:value2 {: RESULT = new Operation(value1, value2, OperationType.SUM); :}
                | operation:value1 MINUS term:value2 {: RESULT = new Operation(value1, value2, OperationType.SUBTRACTION); :}
                | term:value {: RESULT = value; :}
                ;    

term::=     term:value1 MULTIPLICATION factor:value2  {: RESULT = new Operation(value1, value2, OperationType.MULTIPLICATION); :}
            | term:value1 DIVISION factor:value2  {: RESULT = new Operation(value1, value2, OperationType.DIVISION); :}
            | factor:value {: RESULT = value; :}
            ;

factor::=   INTEGER:value {: RESULT = new Operation(value); :}
            | ID:id {: RESULT = new Operation(id, OperationType.ID); :}
            ;



//------------------------------------  DECLARACION DE INSTRUCCIONES    ------------------------------------//
instructions::=     INSTRUCTIONS PARENTHESISO ID:id PARENTHESISC SQUAREBRACKETO instruction:instList SQUAREBRACKETC instructions:canvasInst {: RESULT = canvasInst; RESULT.add(new CanvasInstructions(id, instList, canvases)); :}
                    | INSTRUCTIONS PARENTHESISO ID:id PARENTHESISC SQUAREBRACKETO instruction:instList SQUAREBRACKETC {: RESULT = new LinkedList<>(); RESULT.add(new CanvasInstructions(id, instList, canvases)); :}
                    ;

instruction::=   assignValues:inst instruction:instList {: RESULT = instList; RESULT.add(inst); :}
                | paint:inst instruction:instList {: RESULT = instList; RESULT.add(inst); :}
                | conditional:inst instruction:instList {: RESULT = instList; RESULT.add(inst); :}
                | loop:inst instruction:instList {: RESULT = instList; RESULT.add(inst); :}
                | assignValues:inst {: RESULT = new LinkedList<>(); RESULT.add(inst); :} 
                | paint:inst  {: RESULT = new LinkedList<>(); RESULT.add(inst); :}
                | conditional:inst {: RESULT = new LinkedList<>(); RESULT.add(inst); :}
                | loop:inst  {: RESULT = new LinkedList<>(); RESULT.add(inst); :}
                ;


//------------------------------------  ASIGNACION DE VALORES    ------------------------------------//
assignValues::=     ID:id EQUALS assignValue:value SEMICOLON {: RESULT = new Assignment(id, value); :}
                    ;

assignValue::=      IDLITERAL:value {: new Operation(value, OperationType.LITERAL); :}
                    | operation:value {: RESULT = value; :}
                    | relationalOp:value {: RESULT = value; :} 
                    ;


//------------------------------------  OPERACIONES RELACIONALES    ------------------------------------//
relationalOp::=    integerValue:value1 COMPARATION integerValue:value2  {: RESULT = new Operation(value1, value2, OperationType.COMPARATION); :}
                    | integerValue:value1 LESSEQUALSTHAN integerValue:value2 {: RESULT = new Operation(value1, value2, OperationType.LESS_EQUAL_THAN); :}
                    | integerValue:value1 MOREEQUALSTHAN integerValue:value2 {: RESULT = new Operation(value1, value2, OperationType.GREATER_EQUAL_THAN); :}
                    | integerValue:value1 LESSTHAN integerValue:value2 {: RESULT = new Operation(value1, value2, OperationType.LESS_THAN); :}
                    | integerValue:value1 MORETHAN integerValue:value2 {: RESULT = new Operation(value1, value2, OperationType.GREATER_THAN); :}
                    ;

integerValue::=    INTEGER:value {: RESULT = new Operation(value); :}
                   | ID:value {: RESULT = new Operation(value, OperationType.ID); :}
                   ;


//------------------------------------  INSTRUCCION WHILE    ------------------------------------//
loop::=     WHILE PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO instruction:instList CURLYBRACKETC {: RESULT = new While(conditions, instList); :}
            | WHILE PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC {: RESULT = new While(conditions, null); :}
            ;

//------------------------------------  CONDICIONES    ------------------------------------//
conditions::=   ID:id OR conditions:value {: RESULT = new Operation(new Operation(id, OperationType.ID), value, OperationType.OR); :}
                | relationalOp:value1 OR conditions:value2 {: RESULT = new Operation(value1, value2, OperationType.OR); :}
                | TRUE:value1 OR conditions:value2 {: RESULT = new Operation(new Operation(value1), value2, OperationType.OR); :}
                | FALSE:value1 OR conditions:value2  {: RESULT = new Operation(new Operation(value1), value2, OperationType.OR); :}
                | ID:id AND conditions:value {: RESULT = new Operation(new Operation(id, OperationType.ID), value, OperationType.AND); :}
                | relationalOp:value1 AND conditions:value2 {: RESULT = new Operation(value1, value2, OperationType.AND); :}
                | TRUE:value1 AND conditions:value2 {: RESULT = new Operation(new Operation(value1), value2, OperationType.AND); :}
                | FALSE:value1 AND conditions:value2  {: RESULT = new Operation(new Operation(value1), value2, OperationType.AND); :}
                | ID:id {: RESULT = new Operation(id, OperationType.ID); :} 
                | relationalOp:value {: RESULT = value; :}
                | TRUE:value {: RESULT = new Operation(value); :}
                | FALSE:value {: RESULT = new Operation(value); :}
                ;


//------------------------------------  INSTRUCCION IF-ELSE    ------------------------------------//
conditional::=      IF PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO instruction:instList CURLYBRACKETC ELSE CURLYBRACKETO instruction:elseList CURLYBRACKETC {: RESULT = new If(conditions, instList, elseList); :}
                    | IF PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC ELSE CURLYBRACKETO instruction:elseList CURLYBRACKETC {: RESULT = new If(conditions, null, elseList); :}
                    | IF PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO instruction:instList CURLYBRACKETC ELSE CURLYBRACKETO CURLYBRACKETC {: RESULT = new If(conditions, instList, null); :}
                    | IF PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC ELSE CURLYBRACKETO CURLYBRACKETC {: RESULT = new If(conditions, null, null); :}    
                    | IF PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO instruction:instList CURLYBRACKETC {: RESULT = new If(conditions, instList); :}
                    | IF PARENTHESISO conditions:conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC {: RESULT = new If(conditions, null); :}
                    ;


//------------------------------------  INSTRUCCION PINTAR    ------------------------------------//
paint::=    PAINT PARENTHESISO stringParam:value1 COMMA stringParam:value2 COMMA intParam:value3 COMMA intParam:value4 PARENTHESISC SEMICOLON {: RESULT = new Paint(value1, value2, value3, value4, 0); :}
            | PAINT PARENTHESISO stringParam:value1 COMMA stringParam:value2 COMMA integerValue:value3 FULLSTOP FULLSTOP integerValue:value4 COMMA intParam:value5 PARENTHESISC SEMICOLON {: RESULT = new Paint(value1, value2, value3, value4, value5, 1); :}
            | PAINT PARENTHESISO stringParam:value1 COMMA stringParam:value2 COMMA intParam:value3 COMMA integerValue:value4 FULLSTOP FULLSTOP integerValue:value5 PARENTHESISC SEMICOLON {: RESULT = new Paint(value1, value2, value3, value4, value5, 2); :}
            | PAINT PARENTHESISO stringParam:value1 COMMA stringParam:value2 COMMA integerValue:value3 FULLSTOP FULLSTOP integerValue:value4 COMMA integerValue:value5 FULLSTOP FULLSTOP integerValue:value6 PARENTHESISC SEMICOLON {: RESULT = new Paint(value1, value2, value3, value4, value5, value6, 3); :} 
            ;

stringParam::=  IDLITERAL:id {: RESULT = new Operation(id, OperationType.LITERAL); :} 
                | ID:id {: RESULT = new Operation(id, OperationType.ID); :} 
                ;

intParam::=     operation:value {: RESULT = value; :}
                ;
