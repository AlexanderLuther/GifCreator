
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.parser;

import java_cup.runtime.*;
import com.hluther.gui.GifCreatorFrame;
import com.hluther.lexer.ColorsFileLexer;
import com.hluther.controlClasses.ColorsFileDriver;
import com.hluther.entityClasses.CColor;
import java.awt.Color;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ColorsFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ColorsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ColorsFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ColorsFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ColorsFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\011\000\002\003" +
    "\011\000\002\003\007\000\002\012\011\000\002\012\007" +
    "\000\002\011\005\000\002\011\003\000\002\010\007\000" +
    "\002\010\007\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\005\004\000\002\007" +
    "\004\000\002\006\004\000\002\004\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\004\005\001\002\000\004\002\076\001" +
    "\002\000\004\016\006\001\002\000\004\006\007\001\002" +
    "\000\004\004\010\001\002\000\004\010\011\001\002\000" +
    "\004\006\015\001\002\000\004\005\013\001\002\000\004" +
    "\005\014\001\002\000\004\002\000\001\002\000\004\004" +
    "\016\001\002\000\004\010\017\001\002\000\004\006\024" +
    "\001\002\000\004\005\021\001\002\000\006\005\ufffe\007" +
    "\022\001\002\000\004\010\011\001\002\000\004\005\uffff" +
    "\001\002\000\004\004\025\001\002\000\012\011\036\012" +
    "\033\013\026\014\034\001\002\000\004\006\040\001\002" +
    "\000\004\005\072\001\002\000\004\007\063\001\002\000" +
    "\004\007\054\001\002\000\004\005\ufffa\001\002\000\004" +
    "\006\040\001\002\000\004\006\051\001\002\000\004\007" +
    "\042\001\002\000\004\006\040\001\002\000\006\005\ufff3" +
    "\007\ufff3\001\002\000\004\017\041\001\002\000\006\005" +
    "\ufff0\007\ufff0\001\002\000\006\011\036\012\033\001\002" +
    "\000\004\007\047\001\002\000\004\007\045\001\002\000" +
    "\004\012\033\001\002\000\004\005\ufff7\001\002\000\004" +
    "\011\036\001\002\000\004\005\ufff6\001\002\000\004\015" +
    "\052\001\002\000\004\005\ufffb\001\002\000\006\005\ufff1" +
    "\007\ufff1\001\002\000\006\011\036\013\026\001\002\000" +
    "\004\007\061\001\002\000\004\007\057\001\002\000\004" +
    "\013\026\001\002\000\004\005\ufff5\001\002\000\004\011" +
    "\036\001\002\000\004\005\ufff4\001\002\000\006\012\033" +
    "\013\026\001\002\000\004\007\070\001\002\000\004\007" +
    "\066\001\002\000\004\013\026\001\002\000\004\005\ufff8" +
    "\001\002\000\004\012\033\001\002\000\004\005\ufff9\001" +
    "\002\000\006\005\ufffc\007\073\001\002\000\004\010\017" +
    "\001\002\000\004\005\ufffd\001\002\000\006\005\ufff2\007" +
    "\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\027\006\030\007\034\010" +
    "\031\011\026\001\001\000\004\004\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\043\006\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\045\001\001\000\002\001\001\000\004\005\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\055\007\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\057\001\001\000" +
    "\002\001\001\000\004\005\061\001\001\000\002\001\001" +
    "\000\006\006\064\007\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\066\001\001\000\002\001\001" +
    "\000\004\006\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ColorsFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ColorsFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ColorsFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private GifCreatorFrame gifCreatorFrame;
    private ColorsFileDriver colorsFileDriver;
    private Hashtable symbolTable;
    private Hashtable<String, CColor> colors;
    
    public ColorsFileParser(ColorsFileLexer lexer, GifCreatorFrame gifCreatorFrame, ColorsFileDriver colorsFileDriver, Hashtable symbolTable) { 
        super(lexer);
        this.gifCreatorFrame = gifCreatorFrame;
        this.colorsFileDriver = colorsFileDriver;
        this.symbolTable = symbolTable;
    }

    public void syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    }

    public void semanticError(String lexeme, int line, int column, int errorType){
        String msg = "";    
        switch(errorType){
            case 0:
                msg = "Error Semantico -> No existe ningun lienzo con el identificador ["+lexeme+"]. Se descartan todos los colores. Linea: "+line+" Columna: "+column; 
            break;
            case 1:
                msg = "Error Semantico -> Ya existe un color con el identificador ["+lexeme+"]. El color fue descartado. Linea: "+line+" Columna: "+column; 
            break;
        }
        gifCreatorFrame.printError(msg, 1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ColorsFileParser$actions {
  private final ColorsFileParser parser;

  /** Constructor */
  CUP$ColorsFileParser$actions(ColorsFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ColorsFileParser$do_action_part00000000(
    int                        CUP$ColorsFileParser$act_num,
    java_cup.runtime.lr_parser CUP$ColorsFileParser$parser,
    java.util.Stack            CUP$ColorsFileParser$stack,
    int                        CUP$ColorsFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ColorsFileParser$result;

      /* select the action based on the action number */
      switch (CUP$ColorsFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= colors EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).value;
		RESULT = start_val;
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ColorsFileParser$parser.done_parsing();
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // colors ::= CURLYBRACKETO COLORS COLON CURLYBRACKETO canvases CURLYBRACKETC CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // canvases ::= ID COLON CURLYBRACKETO color CURLYBRACKETC COMMA canvases 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)).value;
		int colorsleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-3)).left;
		int colorsright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-3)).right;
		Hashtable<String,CColor> colors = (Hashtable<String,CColor>)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-3)).value;
		  if(symbolTable.get(name) != null){
                        colorsFileDriver.addColors(name, colors);
                    }
                    else{
                        semanticError(name, nameleft, nameright, 0);
                    } 
                
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("canvases",1, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // canvases ::= ID COLON CURLYBRACKETO color CURLYBRACKETC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int colorsleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).left;
		int colorsright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).right;
		Hashtable<String,CColor> colors = (Hashtable<String,CColor>)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).value;
		  if(symbolTable.get(name) != null){
                        colorsFileDriver.addColors(name, colors);
                    }
                    else{
                        semanticError(name, nameleft, nameright, 0);
                    } 
                
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("canvases",1, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // color ::= ID COLON CURLYBRACKETO colorAttribute CURLYBRACKETC COMMA color 
            {
              Hashtable<String,CColor> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-3)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-3)).value;
		int allColorsleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int allColorsright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Hashtable<String,CColor> allColors = (Hashtable<String,CColor>)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		  if(allColors.get(name) == null){
                    allColors.put(name, new CColor(color, name));;
                }
                else{
                    semanticError(name, nameleft, nameright, 1);
                }
                RESULT = allColors;
            
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // color ::= ID COLON CURLYBRACKETO colorAttribute CURLYBRACKETC 
            {
              Hashtable<String,CColor> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)).value;
		  colors = new Hashtable();
                colors.put(name, new CColor(color, name));
                RESULT = colors; 
            
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("color",8, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // colorAttribute ::= HEX COLON HEXCODE 
            {
              Color RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = Color.decode(value); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorAttribute",7, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // colorAttribute ::= colorRGB 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = color; 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorAttribute",7, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // colorRGB ::= red COMMA blue COMMA green 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorRGB",6, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // colorRGB ::= red COMMA green COMMA blue 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorRGB",6, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // colorRGB ::= blue COMMA red COMMA green 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorRGB",6, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // colorRGB ::= blue COMMA green COMMA red 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorRGB",6, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // colorRGB ::= green COMMA red COMMA blue 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorRGB",6, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // colorRGB ::= green COMMA blue COMMA red 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("colorRGB",6, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // red ::= RED integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("red",3, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // blue ::= GREEN integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("blue",5, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // green ::= BLUE integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("green",4, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // integerValue ::= COLON INTEGER 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$ColorsFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$ColorsFileParser$result = parser.getSymbolFactory().newSymbol("integerValue",2, ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.elementAt(CUP$ColorsFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$ColorsFileParser$stack.peek()), RESULT);
            }
          return CUP$ColorsFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ColorsFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ColorsFileParser$do_action(
    int                        CUP$ColorsFileParser$act_num,
    java_cup.runtime.lr_parser CUP$ColorsFileParser$parser,
    java.util.Stack            CUP$ColorsFileParser$stack,
    int                        CUP$ColorsFileParser$top)
    throws java.lang.Exception
    {
              return CUP$ColorsFileParser$do_action_part00000000(
                               CUP$ColorsFileParser$act_num,
                               CUP$ColorsFileParser$parser,
                               CUP$ColorsFileParser$stack,
                               CUP$ColorsFileParser$top);
    }
}

}
