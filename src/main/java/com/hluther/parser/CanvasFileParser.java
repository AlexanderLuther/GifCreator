
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.parser;

import java_cup.runtime.*;
import com.hluther.gui.GifCreatorFrame;
import com.hluther.lexer.CanvasFileLexer;
import com.hluther.controlClasses.CanvasFileDriver;
import com.hluther.entityClasses.SizeDTO;
import com.hluther.entityClasses.Canvas;
import java.awt.Color;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CanvasFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return CanvasSym.class;
}

  /** Default constructor. */
  @Deprecated
  public CanvasFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CanvasFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CanvasFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\011\000\002\003" +
    "\011\000\002\003\007\000\002\023\011\000\002\023\011" +
    "\000\002\023\011\000\002\023\011\000\002\023\011\000" +
    "\002\023\011\000\002\023\011\000\002\023\011\000\002" +
    "\023\011\000\002\023\011\000\002\023\011\000\002\023" +
    "\011\000\002\023\011\000\002\023\011\000\002\023\011" +
    "\000\002\023\011\000\002\023\011\000\002\023\011\000" +
    "\002\023\011\000\002\023\011\000\002\023\011\000\002" +
    "\023\011\000\002\023\011\000\002\023\011\000\002\023" +
    "\005\000\002\016\007\000\002\015\005\000\002\015\003" +
    "\000\002\014\007\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\014\007\000\002" +
    "\010\004\000\002\011\004\000\002\012\004\000\002\017" +
    "\007\000\002\020\007\000\002\020\007\000\002\020\007" +
    "\000\002\020\007\000\002\020\007\000\002\020\007\000" +
    "\002\005\004\000\002\006\004\000\002\007\004\000\002" +
    "\004\004\000\002\013\005\000\002\021\005\000\002\022" +
    "\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\004\005\001\002\000\004\002\322\001" +
    "\002\000\004\017\006\001\002\000\004\006\007\001\002" +
    "\000\004\004\010\001\002\000\004\010\011\001\002\000" +
    "\004\006\015\001\002\000\004\005\013\001\002\000\004" +
    "\005\014\001\002\000\004\002\000\001\002\000\004\004" +
    "\016\001\002\000\014\003\025\020\021\021\026\025\027" +
    "\026\023\001\002\000\004\007\271\001\002\000\004\007" +
    "\240\001\002\000\004\006\172\001\002\000\004\005\167" +
    "\001\002\000\004\006\163\001\002\000\004\007\132\001" +
    "\002\000\004\010\011\001\002\000\004\006\064\001\002" +
    "\000\004\006\062\001\002\000\004\007\031\001\002\000" +
    "\010\020\021\025\027\026\023\001\002\000\004\007\053" +
    "\001\002\000\004\007\044\001\002\000\004\007\035\001" +
    "\002\000\006\020\021\025\027\001\002\000\004\007\042" +
    "\001\002\000\004\007\040\001\002\000\004\025\027\001" +
    "\002\000\004\005\ufff3\001\002\000\004\020\021\001\002" +
    "\000\004\005\ufff2\001\002\000\006\025\027\026\023\001" +
    "\002\000\004\007\051\001\002\000\004\007\047\001\002" +
    "\000\004\025\027\001\002\000\004\005\ufff4\001\002\000" +
    "\004\026\023\001\002\000\004\005\ufff0\001\002\000\006" +
    "\020\021\026\023\001\002\000\004\007\060\001\002\000" +
    "\004\007\056\001\002\000\004\020\021\001\002\000\004" +
    "\005\uffee\001\002\000\004\026\023\001\002\000\004\005" +
    "\uffef\001\002\000\004\011\063\001\002\000\006\005\uffcd" +
    "\007\uffcd\001\002\000\004\004\065\001\002\000\010\022" +
    "\072\023\070\024\067\001\002\000\004\007\121\001\002" +
    "\000\004\006\114\001\002\000\004\006\114\001\002\000" +
    "\004\005\116\001\002\000\004\006\114\001\002\000\004" +
    "\007\104\001\002\000\004\007\075\001\002\000\006\022" +
    "\072\023\070\001\002\000\004\007\102\001\002\000\004" +
    "\007\100\001\002\000\004\023\070\001\002\000\004\005" +
    "\uffd3\001\002\000\004\022\072\001\002\000\004\005\uffd2" +
    "\001\002\000\006\023\070\024\067\001\002\000\004\007" +
    "\111\001\002\000\004\007\107\001\002\000\004\023\070" +
    "\001\002\000\004\005\uffd6\001\002\000\004\024\067\001" +
    "\002\000\004\005\uffd7\001\002\000\006\005\uffd1\007\uffd1" +
    "\001\002\000\004\031\115\001\002\000\006\005\uffce\007" +
    "\uffce\001\002\000\006\005\uffd8\007\uffd8\001\002\000\006" +
    "\005\uffd0\007\uffd0\001\002\000\006\005\uffcf\007\uffcf\001" +
    "\002\000\006\022\072\024\067\001\002\000\004\007\126" +
    "\001\002\000\004\007\124\001\002\000\004\022\072\001" +
    "\002\000\004\005\uffd4\001\002\000\004\024\067\001\002" +
    "\000\004\005\uffd5\001\002\000\004\005\131\001\002\000" +
    "\004\005\uffe5\001\002\000\010\020\021\021\026\025\027" +
    "\001\002\000\004\007\154\001\002\000\004\007\145\001" +
    "\002\000\004\007\136\001\002\000\006\021\026\025\027" +
    "\001\002\000\004\007\143\001\002\000\004\007\141\001" +
    "\002\000\004\025\027\001\002\000\004\005\uffe8\001\002" +
    "\000\004\021\026\001\002\000\004\005\uffec\001\002\000" +
    "\006\020\021\025\027\001\002\000\004\007\152\001\002" +
    "\000\004\007\150\001\002\000\004\025\027\001\002\000" +
    "\004\005\uffe7\001\002\000\004\020\021\001\002\000\004" +
    "\005\uffe6\001\002\000\006\020\021\021\026\001\002\000" +
    "\004\007\161\001\002\000\004\007\157\001\002\000\004" +
    "\020\021\001\002\000\004\005\uffea\001\002\000\004\021" +
    "\026\001\002\000\004\005\uffeb\001\002\000\006\027\164" +
    "\030\165\001\002\000\006\005\uffcb\007\uffcb\001\002\000" +
    "\006\005\uffca\007\uffca\001\002\000\006\005\uffcc\007\uffcc" +
    "\001\002\000\006\005\ufffe\007\170\001\002\000\004\010" +
    "\011\001\002\000\004\005\uffff\001\002\000\004\004\173" +
    "\001\002\000\012\012\204\013\200\014\174\015\201\001" +
    "\002\000\004\006\114\001\002\000\004\007\230\001\002" +
    "\000\004\007\221\001\002\000\004\005\uffe2\001\002\000" +
    "\004\006\114\001\002\000\004\006\216\001\002\000\004" +
    "\007\207\001\002\000\004\005\206\001\002\000\004\006" +
    "\114\001\002\000\006\005\uffdb\007\uffdb\001\002\000\006" +
    "\005\uffe4\007\uffe4\001\002\000\006\012\204\013\200\001" +
    "\002\000\004\007\214\001\002\000\004\007\212\001\002" +
    "\000\004\013\200\001\002\000\004\005\uffdf\001\002\000" +
    "\004\012\204\001\002\000\004\005\uffde\001\002\000\004" +
    "\016\217\001\002\000\004\005\uffe3\001\002\000\006\005" +
    "\uffd9\007\uffd9\001\002\000\006\012\204\014\174\001\002" +
    "\000\004\007\226\001\002\000\004\007\224\001\002\000" +
    "\004\014\174\001\002\000\004\005\uffdd\001\002\000\004" +
    "\012\204\001\002\000\004\005\uffdc\001\002\000\006\013" +
    "\200\014\174\001\002\000\004\007\235\001\002\000\004" +
    "\007\233\001\002\000\004\014\174\001\002\000\004\005" +
    "\uffe0\001\002\000\004\013\200\001\002\000\004\005\uffe1" +
    "\001\002\000\006\005\uffda\007\uffda\001\002\000\010\020" +
    "\021\021\026\026\023\001\002\000\004\007\262\001\002" +
    "\000\004\007\253\001\002\000\004\007\244\001\002\000" +
    "\006\020\021\021\026\001\002\000\004\007\251\001\002" +
    "\000\004\007\247\001\002\000\004\020\021\001\002\000" +
    "\004\005\ufffa\001\002\000\004\021\026\001\002\000\004" +
    "\005\ufffb\001\002\000\006\020\021\026\023\001\002\000" +
    "\004\007\260\001\002\000\004\007\256\001\002\000\004" +
    "\020\021\001\002\000\004\005\ufff6\001\002\000\004\026" +
    "\023\001\002\000\004\005\ufff7\001\002\000\006\021\026" +
    "\026\023\001\002\000\004\007\267\001\002\000\004\007" +
    "\265\001\002\000\004\021\026\001\002\000\004\005\ufffc" +
    "\001\002\000\004\026\023\001\002\000\004\005\ufff8\001" +
    "\002\000\010\021\026\025\027\026\023\001\002\000\004" +
    "\007\313\001\002\000\004\007\304\001\002\000\004\007" +
    "\275\001\002\000\006\021\026\025\027\001\002\000\004" +
    "\007\302\001\002\000\004\007\300\001\002\000\004\025" +
    "\027\001\002\000\004\005\uffe9\001\002\000\004\021\026" +
    "\001\002\000\004\005\uffed\001\002\000\006\025\027\026" +
    "\023\001\002\000\004\007\311\001\002\000\004\007\307" +
    "\001\002\000\004\025\027\001\002\000\004\005\ufff5\001" +
    "\002\000\004\026\023\001\002\000\004\005\ufff1\001\002" +
    "\000\006\021\026\026\023\001\002\000\004\007\320\001" +
    "\002\000\004\007\316\001\002\000\004\021\026\001\002" +
    "\000\004\005\ufffd\001\002\000\004\026\023\001\002\000" +
    "\004\005\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\013\017\016\016\017\027\021\023\023\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\031\016\032\021\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\035\016\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\040\001\001\000\002\001\001\000\004" +
    "\016\042\001\001\000\002\001\001\000\006\013\044\021" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\047\001\001\000\002\001\001\000\004\021\051\001" +
    "\001\000\002\001\001\000\006\016\053\021\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\056\001" +
    "\001\000\002\001\001\000\004\021\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\072\006\065\007\073\020\070\001\001" +
    "\000\002\001\001\000\004\004\117\001\001\000\004\004" +
    "\116\001\001\000\002\001\001\000\004\004\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\076\006" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\100\001\001\000\002\001\001\000\004\005\102\001" +
    "\001\000\002\001\001\000\006\006\104\007\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\107\001" +
    "\001\000\002\001\001\000\004\007\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\121\007\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\124\001\001\000\002\001\001" +
    "\000\004\007\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\132\016\134\017\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\136\017\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\141\001\001\000\002\001" +
    "\001\000\004\017\143\001\001\000\002\001\001\000\006" +
    "\013\145\016\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\150\001\001\000\002\001\001\000\004" +
    "\016\152\001\001\000\002\001\001\000\006\016\154\017" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\157\001\001\000\002\001\001\000\004\017\161\001" +
    "\001\000\002\001\001\000\004\022\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\174\011\201\012\175\014\176\015" +
    "\202\001\001\000\004\004\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\210\012\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\212\001\001\000\002\001" +
    "\001\000\004\010\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\222\011\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\224\001\001\000\002\001\001\000\004\010" +
    "\226\001\001\000\002\001\001\000\006\011\230\012\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\233\001\001\000\002\001\001\000\004\012\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\240\017" +
    "\241\021\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\244\017\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\247\001\001" +
    "\000\002\001\001\000\004\017\251\001\001\000\002\001" +
    "\001\000\006\016\253\021\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\256\001\001\000\002\001" +
    "\001\000\004\021\260\001\001\000\002\001\001\000\006" +
    "\017\262\021\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\265\001\001\000\002\001\001\000\004" +
    "\021\267\001\001\000\002\001\001\000\010\013\271\017" +
    "\272\021\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\275\017\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\300\001\001" +
    "\000\002\001\001\000\004\017\302\001\001\000\002\001" +
    "\001\000\006\013\304\021\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\307\001\001\000\002\001" +
    "\001\000\004\021\311\001\001\000\002\001\001\000\006" +
    "\017\313\021\314\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\316\001\001\000\002\001\001\000\004" +
    "\021\320\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CanvasFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CanvasFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CanvasFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private GifCreatorFrame gifCreatorFrame;
    private CanvasFileDriver canvasFileDriver;
    private Hashtable symbolTable;
    private int errorType;
    
    public CanvasFileParser(CanvasFileLexer lexer, GifCreatorFrame gifCreatorFrame, CanvasFileDriver canvasFileDriver, Hashtable symbolTable) { 
        super(lexer);
        this.gifCreatorFrame = gifCreatorFrame;
        this.canvasFileDriver = canvasFileDriver;
        this.symbolTable = symbolTable;
    }

    public void syntax_error(Symbol s){
        System.out.println("Error " + s.value.toString());
        String msg = "";
        switch(errorType){
            case 0:
                msg = "Error Sintactico -> Lexema recibido: ["+s.value.toString()+"]. Linea: "+s.left+" Columna: "+s.right+" Se ha descartado completamente el lienzo.";
            break;
            case 1:
                msg = "Error Sintactico -> Lexema recibido: ["+s.value.toString()+"]. Linea: "+s.left+" Columna: "+s.right+
                      " Se establecio por defecto como color del lienzo el color negro";
            break;
            case 2:
                //msg = "Error Sintactico -> Lexema recibido: []. Linea: "+s.left+" Columna: "+s.right+
                  //    "Se esperaba \"gif\" o \"png\". El valor asignado por defecto es \"gif\"";
            break;
            case 3:
               // msg = "Error Sintactico -> Lexema recibido: []. Linea: "+s.left+" Columna: "+s.right+
                 //     "Se esperaba \"gif\" o \"png\". El valor asignado por defecto es \"gif\"";
            break;

        }
        gifCreatorFrame.printError(msg, 0);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.out.println("Error Grave" + s);
    } 
   
    public void semanticError(String lexeme, int line, int column){
        gifCreatorFrame.printError("Error Semantico -> Ya existe un lienzo con el identificador ["+lexeme+"]. Se descarto el lienzo. Linea: "+line+" Columna: "+column, 0);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CanvasFileParser$actions {
  private final CanvasFileParser parser;

  /** Constructor */
  CUP$CanvasFileParser$actions(CanvasFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CanvasFileParser$do_action_part00000000(
    int                        CUP$CanvasFileParser$act_num,
    java_cup.runtime.lr_parser CUP$CanvasFileParser$parser,
    java.util.Stack            CUP$CanvasFileParser$stack,
    int                        CUP$CanvasFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CanvasFileParser$result;

      /* select the action based on the action number */
      switch (CUP$CanvasFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= canvases EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).value;
		RESULT = start_val;
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CanvasFileParser$parser.done_parsing();
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // canvases ::= CURLYBRACKETO CANVAS COLON CURLYBRACKETO canvas CURLYBRACKETC CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvases",0, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // canvas ::= ID COLON CURLYBRACKETO canvasAttribute CURLYBRACKETC COMMA canvas 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-3)).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-3)).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-3)).value;
		  if(symbolTable.get(value) == null){
                    canvas.setId(value); 
                    canvasFileDriver.addCanvas(canvas); 
                    symbolTable.put(value, value);
                }
                else{
                    semanticError(value, valueleft, valueright);
                } 
            
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvas",1, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // canvas ::= ID COLON CURLYBRACKETO canvasAttribute CURLYBRACKETC 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int canvasleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).left;
		int canvasright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).right;
		Canvas canvas = (Canvas)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).value;
		  if(symbolTable.get(value) == null){
                    canvas.setId(value); 
                    canvasFileDriver.addCanvas(canvas); 
                    symbolTable.put(value, value);
                }
                else{
                    semanticError(value, valueleft, valueright);
                } 
            
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvas",1, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // canvasAttribute ::= background COMMA name COMMA type COMMA size 
            {
              Canvas RESULT =null;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // canvasAttribute ::= name COMMA background COMMA type COMMA size 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // canvasAttribute ::= name COMMA type COMMA background COMMA size 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // canvasAttribute ::= name COMMA type COMMA size COMMA background 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // canvasAttribute ::= background COMMA name COMMA size COMMA type 
            {
              Canvas RESULT =null;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // canvasAttribute ::= name COMMA background COMMA size COMMA type 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // canvasAttribute ::= name COMMA size COMMA background COMMA type 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // canvasAttribute ::= name COMMA size COMMA type COMMA background 
            {
              Canvas RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // canvasAttribute ::= background COMMA size COMMA type COMMA name 
            {
              Canvas RESULT =null;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // canvasAttribute ::= size COMMA background COMMA type COMMA name 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // canvasAttribute ::= size COMMA type COMMA background COMMA name 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // canvasAttribute ::= size COMMA type COMMA name COMMA background 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // canvasAttribute ::= background COMMA size COMMA name COMMA type 
            {
              Canvas RESULT =null;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // canvasAttribute ::= size COMMA background COMMA name COMMA type 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // canvasAttribute ::= size COMMA name COMMA background COMMA type 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // canvasAttribute ::= size COMMA name COMMA type COMMA background 
            {
              Canvas RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // canvasAttribute ::= background COMMA type COMMA name COMMA size 
            {
              Canvas RESULT =null;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // canvasAttribute ::= type COMMA background COMMA name COMMA size 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // canvasAttribute ::= type COMMA name COMMA background COMMA size 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // canvasAttribute ::= type COMMA name COMMA size COMMA background 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // canvasAttribute ::= background COMMA type COMMA size COMMA name 
            {
              Canvas RESULT =null;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // canvasAttribute ::= type COMMA background COMMA size COMMA name 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // canvasAttribute ::= type COMMA size COMMA background COMMA name 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // canvasAttribute ::= type COMMA size COMMA name COMMA background 
            {
              Canvas RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).right;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int backgroundleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int backgroundright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color background = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Canvas(name, size.getPixelsAmount(), size.getRows(), size.getColumns(), background,  type); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // canvasAttribute ::= error canvas CURLYBRACKETC 
            {
              Canvas RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		 syntax_error((Symbol)e); errorType = 0; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("canvasAttribute",17, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // background ::= BACKGROUND COLON CURLYBRACKETO backgroundAttribute CURLYBRACKETC 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).value;
		 RESULT = color; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("background",12, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // backgroundAttribute ::= HEX COLON HEXCODE 
            {
              Color RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = Color.decode(value); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("backgroundAttribute",11, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // backgroundAttribute ::= color 
            {
              Color RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Color color = (Color)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = color; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("backgroundAttribute",11, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // color ::= red COMMA blue COMMA green 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // color ::= red COMMA green COMMA blue 
            {
              Color RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // color ::= blue COMMA red COMMA green 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // color ::= blue COMMA green COMMA red 
            {
              Color RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // color ::= green COMMA red COMMA blue 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // color ::= green COMMA blue COMMA red 
            {
              Color RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer green = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int blueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer blue = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int redleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer red = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new Color(red, blue, green); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("color",10, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // red ::= RED integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("red",6, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // blue ::= GREEN integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("blue",7, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // green ::= BLUE integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("green",8, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // size ::= SIZE COLON CURLYBRACKETO sizeAttribute CURLYBRACKETC 
            {
              SizeDTO RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).right;
		SizeDTO size = (SizeDTO)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)).value;
		 RESULT = size; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("size",13, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sizeAttribute ::= square COMMA dimensionX COMMA dimensionY 
            {
              SizeDTO RESULT =null;
		int pixelsAmountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int pixelsAmountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer pixelsAmount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer columns = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new SizeDTO(pixelsAmount, rows, columns); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("sizeAttribute",14, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sizeAttribute ::= square COMMA dimensionY COMMA dimensionX 
            {
              SizeDTO RESULT =null;
		int pixelsAmountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int pixelsAmountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer pixelsAmount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer columns = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new SizeDTO(pixelsAmount, rows, columns); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("sizeAttribute",14, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sizeAttribute ::= dimensionX COMMA square COMMA dimensionY 
            {
              SizeDTO RESULT =null;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer columns = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int pixelsAmountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int pixelsAmountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer pixelsAmount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new SizeDTO(pixelsAmount, rows, columns); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("sizeAttribute",14, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sizeAttribute ::= dimensionX COMMA dimensionY COMMA square 
            {
              SizeDTO RESULT =null;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer columns = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int pixelsAmountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int pixelsAmountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer pixelsAmount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new SizeDTO(pixelsAmount, rows, columns); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("sizeAttribute",14, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sizeAttribute ::= dimensionY COMMA square COMMA dimensionX 
            {
              SizeDTO RESULT =null;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int pixelsAmountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int pixelsAmountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer pixelsAmount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer columns = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new SizeDTO(pixelsAmount, rows, columns); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("sizeAttribute",14, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sizeAttribute ::= dimensionY COMMA dimensionX COMMA square 
            {
              SizeDTO RESULT =null;
		int rowsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).left;
		int rowsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).right;
		Integer rows = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)).value;
		int columnsleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).left;
		int columnsright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).right;
		Integer columns = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)).value;
		int pixelsAmountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int pixelsAmountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer pixelsAmount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = new SizeDTO(pixelsAmount, rows, columns); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("sizeAttribute",14, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // square ::= SQUARE integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("square",3, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dimensionX ::= DIMENSIONX integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("dimensionX",4, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dimensionY ::= DIMENSIONY integerValue 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("dimensionY",5, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // integerValue ::= COLON INTEGER 
            {
              Integer RESULT =null;
		int amountleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = amount; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("integerValue",2, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // name ::= NAME COLON LITERAL 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = name.replaceAll("\"", ""); 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("name",9, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= TYPE COLON imageType 
            {
              Boolean RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$CanvasFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("type",15, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.elementAt(CUP$CanvasFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // imageType ::= GIF 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("imageType",16, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // imageType ::= PNG 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$CanvasFileParser$result = parser.getSymbolFactory().newSymbol("imageType",16, ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CanvasFileParser$stack.peek()), RESULT);
            }
          return CUP$CanvasFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CanvasFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CanvasFileParser$do_action(
    int                        CUP$CanvasFileParser$act_num,
    java_cup.runtime.lr_parser CUP$CanvasFileParser$parser,
    java.util.Stack            CUP$CanvasFileParser$stack,
    int                        CUP$CanvasFileParser$top)
    throws java.lang.Exception
    {
              return CUP$CanvasFileParser$do_action_part00000000(
                               CUP$CanvasFileParser$act_num,
                               CUP$CanvasFileParser$parser,
                               CUP$CanvasFileParser$stack,
                               CUP$CanvasFileParser$top);
    }
}

}
