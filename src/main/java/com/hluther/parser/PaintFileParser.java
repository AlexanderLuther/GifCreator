
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.parser;

import java_cup.runtime.*;
import com.hluther.gui.GifCreatorFrame;
import com.hluther.lexer.PaintFileLexer;
import com.hluther.controlClasses.PaintFileDriver;
import com.hluther.entityClasses.Canvas;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedList;
import com.hluther.AST.DeclarationAssignment;
import com.hluther.AST.Operation;
import com.hluther.AST.Instruction;
import com.hluther.AST.Declaration;
import com.hluther.AST.Symbol.Type;
import com.hluther.AST.Operation.OperationType;
import com.hluther.AST.Assignment;
import com.hluther.AST.CanvasInstructions;
import com.hluther.AST.PaintInstructions;
import com.hluther.AST.While;
import com.hluther.AST.If;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PaintFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PaintSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PaintFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PaintFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PaintFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\003\000\002\004" +
    "\007\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\006\000\002\005\005" +
    "\000\002\017\005\000\002\015\005\000\002\016\005\000" +
    "\002\010\003\000\002\011\003\000\002\012\003\000\002" +
    "\013\005\000\002\025\003\000\002\025\003\000\002\014" +
    "\005\000\002\024\003\000\002\024\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\003\000\002\026\003\000\002" +
    "\026\003\000\002\007\012\000\002\007\011\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\020\006\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\032\003\000\002\032\003\000\002\022\011\000" +
    "\002\022\010\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\023\015\000\002\023\014\000\002\023\014\000\002" +
    "\023\013\000\002\023\011\000\002\023\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\023\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\225\001\002\000\004\021\007\001\002" +
    "\000\010\005\013\006\010\007\012\001\002\000\004\004" +
    "\206\001\002\000\004\022\060\001\002\000\004\004\041" +
    "\001\002\000\004\004\014\001\002\000\006\012\023\013" +
    "\uffeb\001\002\000\004\013\021\001\002\000\004\013\017" +
    "\001\002\000\012\005\013\006\010\007\012\022\uffef\001" +
    "\002\000\004\022\ufff0\001\002\000\012\005\013\006\010" +
    "\007\012\022\ufff7\001\002\000\004\022\ufffe\001\002\000" +
    "\006\004\024\046\025\001\002\000\014\013\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\001\002\000\014\013\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\001\002\000\010\013\uffee" +
    "\015\035\016\036\001\002\000\014\013\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\001\002\000\014\013\uffe0\015\uffe0" +
    "\016\uffe0\017\031\020\032\001\002\000\006\004\024\046" +
    "\025\001\002\000\006\004\024\046\025\001\002\000\014" +
    "\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde\001\002\000" +
    "\014\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\001\002" +
    "\000\006\004\024\046\025\001\002\000\006\004\024\046" +
    "\025\001\002\000\014\013\uffe1\015\uffe1\016\uffe1\017\031" +
    "\020\032\001\002\000\014\013\uffe2\015\uffe2\016\uffe2\017" +
    "\031\020\032\001\002\000\006\012\053\013\uffe9\001\002" +
    "\000\004\013\051\001\002\000\004\013\047\001\002\000" +
    "\004\013\045\001\002\000\012\005\013\006\010\007\012" +
    "\022\ufff3\001\002\000\004\022\ufffa\001\002\000\012\005" +
    "\013\006\010\007\012\022\ufff5\001\002\000\004\022\ufffc" +
    "\001\002\000\012\005\013\006\010\007\012\022\ufff1\001" +
    "\002\000\004\022\ufff8\001\002\000\010\004\054\047\055" +
    "\050\056\001\002\000\004\013\uffec\001\002\000\004\013" +
    "\uffe4\001\002\000\004\013\uffe3\001\002\000\004\013\uffe5" +
    "\001\002\000\004\024\062\001\002\000\004\002\uffff\001" +
    "\002\000\004\025\063\001\002\000\004\004\064\001\002" +
    "\000\004\026\065\001\002\000\004\021\066\001\002\000" +
    "\010\004\067\031\073\037\076\001\002\000\004\012\176" +
    "\001\002\000\004\022\174\001\002\000\014\004\067\022" +
    "\uffd1\031\073\033\uffd1\037\076\001\002\000\014\004\067" +
    "\022\uffd2\031\073\033\uffd2\037\076\001\002\000\004\025" +
    "\163\001\002\000\014\004\067\022\uffd3\031\073\033\uffd3" +
    "\037\076\001\002\000\014\004\067\022\uffd4\031\073\033" +
    "\uffd4\037\076\001\002\000\004\025\077\001\002\000\012" +
    "\004\101\046\100\047\102\050\104\001\002\000\024\013" +
    "\uffc7\026\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\001\002\000\022\026\uffbb\034\155\035" +
    "\156\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\001\002" +
    "\000\010\026\uffb9\034\151\035\152\001\002\000\014\036" +
    "\137\041\136\042\140\043\142\044\141\001\002\000\010" +
    "\026\uffb8\034\132\035\133\001\002\000\010\026\uffba\034" +
    "\126\035\127\001\002\000\004\026\107\001\002\000\004" +
    "\032\110\001\002\000\012\004\067\031\073\033\112\037" +
    "\076\001\002\000\004\033\120\001\002\000\016\004\uffb2" +
    "\022\uffb2\031\uffb2\033\uffb2\037\uffb2\040\113\001\002\000" +
    "\004\032\114\001\002\000\012\004\067\031\073\033\116" +
    "\037\076\001\002\000\004\033\117\001\002\000\014\004" +
    "\uffb4\022\uffb4\031\uffb4\033\uffb4\037\uffb4\001\002\000\014" +
    "\004\uffb6\022\uffb6\031\uffb6\033\uffb6\037\uffb6\001\002\000" +
    "\016\004\uffb3\022\uffb3\031\uffb3\033\uffb3\037\uffb3\040\121" +
    "\001\002\000\004\032\122\001\002\000\012\004\067\031" +
    "\073\033\124\037\076\001\002\000\004\033\125\001\002" +
    "\000\014\004\uffb5\022\uffb5\031\uffb5\033\uffb5\037\uffb5\001" +
    "\002\000\014\004\uffb7\022\uffb7\031\uffb7\033\uffb7\037\uffb7" +
    "\001\002\000\012\004\101\046\100\047\102\050\104\001" +
    "\002\000\012\004\101\046\100\047\102\050\104\001\002" +
    "\000\004\026\uffc2\001\002\000\004\026\uffbe\001\002\000" +
    "\012\004\101\046\100\047\102\050\104\001\002\000\012" +
    "\004\101\046\100\047\102\050\104\001\002\000\004\026" +
    "\uffc0\001\002\000\004\026\uffbc\001\002\000\006\004\143" +
    "\046\100\001\002\000\006\004\143\046\100\001\002\000" +
    "\006\004\143\046\100\001\002\000\006\004\143\046\100" +
    "\001\002\000\006\004\143\046\100\001\002\000\012\013" +
    "\uffc6\026\uffc6\034\uffc6\035\uffc6\001\002\000\012\013\uffc8" +
    "\026\uffc8\034\uffc8\035\uffc8\001\002\000\012\013\uffc9\026" +
    "\uffc9\034\uffc9\035\uffc9\001\002\000\012\013\uffca\026\uffca" +
    "\034\uffca\035\uffca\001\002\000\012\013\uffcc\026\uffcc\034" +
    "\uffcc\035\uffcc\001\002\000\012\013\uffcb\026\uffcb\034\uffcb" +
    "\035\uffcb\001\002\000\012\004\101\046\100\047\102\050" +
    "\104\001\002\000\012\004\101\046\100\047\102\050\104" +
    "\001\002\000\004\026\uffc1\001\002\000\004\026\uffbd\001" +
    "\002\000\012\004\101\046\100\047\102\050\104\001\002" +
    "\000\012\004\101\046\100\047\102\050\104\001\002\000" +
    "\004\026\uffc3\001\002\000\004\026\uffbf\001\002\000\006" +
    "\022\uffd8\033\uffd8\001\002\000\006\022\uffd7\033\uffd7\001" +
    "\002\000\012\004\101\046\100\047\102\050\104\001\002" +
    "\000\004\026\165\001\002\000\004\032\166\001\002\000" +
    "\012\004\067\031\073\033\170\037\076\001\002\000\004" +
    "\033\171\001\002\000\014\004\uffc4\022\uffc4\031\uffc4\033" +
    "\uffc4\037\uffc4\001\002\000\014\004\uffc5\022\uffc5\031\uffc5" +
    "\033\uffc5\037\uffc5\001\002\000\006\022\uffd6\033\uffd6\001" +
    "\002\000\006\022\uffd5\033\uffd5\001\002\000\006\002\uffd9" +
    "\024\062\001\002\000\004\002\uffda\001\002\000\010\004" +
    "\203\011\202\046\177\001\002\000\026\013\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\036\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\001\002\000\004\013\uffcd\001\002\000\010" +
    "\013\uffce\015\035\016\036\001\002\000\004\013\uffcf\001" +
    "\002\000\026\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\001\002\000" +
    "\004\013\205\001\002\000\014\004\uffd0\022\uffd0\031\uffd0" +
    "\033\uffd0\037\uffd0\001\002\000\006\012\220\013\uffea\001" +
    "\002\000\004\013\216\001\002\000\004\013\214\001\002" +
    "\000\004\013\212\001\002\000\012\005\013\006\010\007" +
    "\012\022\ufff2\001\002\000\004\022\ufff9\001\002\000\012" +
    "\005\013\006\010\007\012\022\ufff4\001\002\000\004\022" +
    "\ufffb\001\002\000\012\005\013\006\010\007\012\022\ufff6" +
    "\001\002\000\004\022\ufffd\001\002\000\010\004\222\010" +
    "\223\011\224\001\002\000\004\013\uffe8\001\002\000\004" +
    "\013\uffed\001\002\000\004\013\uffe6\001\002\000\004\013" +
    "\uffe7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\004\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\010" +
    "\001\001\000\010\011\206\013\207\015\210\001\001\000" +
    "\002\001\001\000\010\012\042\014\043\016\041\001\001" +
    "\000\006\010\014\017\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\017\001\001" +
    "\000\002\001\001\000\004\005\021\001\001\000\002\001" +
    "\001\000\010\026\026\027\027\030\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\033\001\001\000\004" +
    "\026\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\026\027\037\001\001\000\006\026\026\027\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\045\001\001\000\002\001\001\000\004\005" +
    "\047\001\001\000\002\001\001\000\004\005\051\001\001" +
    "\000\002\001\001\000\004\024\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\073\006\067\020\074\022\070\023\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\073" +
    "\006\172\020\074\022\070\023\071\001\001\000\014\003" +
    "\073\006\171\020\074\022\070\023\071\001\001\000\002" +
    "\001\001\000\014\003\073\006\161\020\074\022\070\023" +
    "\071\001\001\000\014\003\073\006\160\020\074\022\070" +
    "\023\071\001\001\000\002\001\001\000\010\032\102\033" +
    "\104\034\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\073\006\110\020\074\022\070\023\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\073\006\114\020\074\022\070\023\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\073\006\122\020" +
    "\074\022\070\023\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\102\033\104\034" +
    "\130\001\001\000\010\032\102\033\104\034\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\102\033" +
    "\104\034\134\001\001\000\010\032\102\033\104\034\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\147\001\001\000\004\032\146\001\001\000\004\032\145" +
    "\001\001\000\004\032\144\001\001\000\004\032\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\102\033\104\034\153\001\001\000\010\032\102" +
    "\033\104\034\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\102\033\104\034\157\001\001\000\010" +
    "\032\102\033\104\034\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\102\033\104\034\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\073\006\166\020\074\022\070" +
    "\023\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\174\001\001\000\002\001\001\000\016\026\026\027" +
    "\027\030\200\031\203\032\102\033\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\212\001\001\000\002\001\001" +
    "\000\004\005\214\001\001\000\002\001\001\000\004\005" +
    "\216\001\001\000\002\001\001\000\004\025\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PaintFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PaintFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PaintFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private GifCreatorFrame gifCreatorFrame;
    private PaintFileDriver paintFileDriver;
    private Hashtable<String, Canvas> canvasTable;
    
    public PaintFileParser(PaintFileLexer lexer, GifCreatorFrame gifCreatorFrame, PaintFileDriver paintFileDriver, Hashtable<String, Canvas> canvasTable) { 
        super(lexer);
        this.gifCreatorFrame = gifCreatorFrame;
        this.paintFileDriver = paintFileDriver;
        this.canvasTable = canvasTable;
    }

    public void syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    } 

    public void semanticError(String lexeme, int line, int column, int errorType){
        String msg = "";    
        switch(errorType){
            case 0:
                msg = "Error Semantico -> Ya existe una variable con el nombre ["+lexeme+"]. Linea: "+line+" Columna: "+column; 
            break;
            case 1:
                msg = "Error Semantico -> No existe ninguna variable con el nombre  ["+lexeme+"]. Imposible asignar un valor. Linea: "+line+" Columna: "+column; 
            break;
        }
        gifCreatorFrame.printError(msg, 3);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PaintFileParser$actions {
  private final PaintFileParser parser;

  /** Constructor */
  CUP$PaintFileParser$actions(PaintFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PaintFileParser$do_action_part00000000(
    int                        CUP$PaintFileParser$act_num,
    java_cup.runtime.lr_parser CUP$PaintFileParser$parser,
    java.util.Stack            CUP$PaintFileParser$stack,
    int                        CUP$PaintFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PaintFileParser$result;

      /* select the action based on the action number */
      switch (CUP$PaintFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= paintStart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		RESULT = start_val;
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PaintFileParser$parser.done_parsing();
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // paintStart ::= varStructure 
            {
              Object RESULT =null;
		int abstractSintaxTreeleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int abstractSintaxTreeright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> abstractSintaxTree = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 paintFileDriver.executeAST(abstractSintaxTree); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("paintStart",0, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // varStructure ::= VARS SQUAREBRACKETO vars SQUAREBRACKETC instructions 
            {
              LinkedList<Instruction> RESULT =null;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		LinkedList<Instruction> varsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instructionsListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instructionsListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instructionsList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new PaintInstructions(varsList, instructionsList)); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("varStructure",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vars ::= INT integerDeclaration SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // vars ::= STRING stringDeclaration SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vars ::= BOOLEAN booleanDeclaration SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vars ::= STRING stringAssigment SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vars ::= BOOLEAN booleanAssigment SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // vars ::= STRING stringVarAssigment SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vars ::= BOOLEAN booleanVarAssigment SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vars ::= INT integerDeclaration SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vars ::= STRING stringDeclaration SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vars ::= BOOLEAN booleanDeclaration SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= STRING stringAssigment SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vars ::= BOOLEAN booleanAssigment SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vars ::= STRING stringVarAssigment SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vars ::= BOOLEAN booleanVarAssigment SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vars ::= INT integerOpAssigment SEMICOLON vars 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vars ::= INT integerOpAssigment SEMICOLON 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // integerOpAssigment ::= ID EQUALS operation 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new DeclarationAssignment(id, value, Type.INT); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerOpAssigment",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stringVarAssigment ::= ID EQUALS ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new DeclarationAssignment(id, new Operation(value, OperationType.ID), Type.STRING); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringVarAssigment",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // booleanVarAssigment ::= ID EQUALS ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new DeclarationAssignment(id, new Operation(value, OperationType.ID), Type.BOOLEAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanVarAssigment",12, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // integerDeclaration ::= ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Declaration(id, Type.INT); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerDeclaration",6, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stringDeclaration ::= ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Declaration(id, Type.STRING); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringDeclaration",7, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleanDeclaration ::= ID 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Declaration(id, Type.BOOLEAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanDeclaration",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stringAssigment ::= ID EQUALS stringValue 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new DeclarationAssignment(id, value, Type.STRING); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringAssigment",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stringValue ::= IDLITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.LITERAL); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringValue",19, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stringValue ::= STRINGLITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.LITERAL); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringValue",19, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // booleanAssigment ::= ID EQUALS booleanValue 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new DeclarationAssignment(id, value, Type.BOOLEAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanAssigment",10, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // booleanValue ::= TRUE 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanValue",18, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // booleanValue ::= FALSE 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanValue",18, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operation ::= operation PLUS term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUM); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("operation",22, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operation ::= operation MINUS term 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.SUBTRACTION); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("operation",22, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operation ::= term 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("operation",22, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= term MULTIPLICATION factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.MULTIPLICATION); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= term DIVISION factor 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.DIVISION); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= factor 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= INTEGER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= ID 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(id, OperationType.ID); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instructions ::= INSTRUCTIONS PARENTHESISO ID PARENTHESISC SQUAREBRACKETO instruction SQUAREBRACKETC instructions 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int canvasInstleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int canvasInstright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> canvasInst = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = canvasInst; RESULT.add(new CanvasInstructions(id, instList)); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instructions",5, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instructions ::= INSTRUCTIONS PARENTHESISO ID PARENTHESISC SQUAREBRACKETO instruction SQUAREBRACKETC 
            {
              LinkedList<Instruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new CanvasInstructions(id, instList)); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instructions",5, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruction ::= assignValues instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.add(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruction ::= paint instruction 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruction ::= conditional instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.add(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruction ::= loop instruction 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = instList; RESULT.add(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruction ::= assignValues 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction ::= paint 
            {
              LinkedList<Instruction> RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction ::= conditional 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruction ::= loop 
            {
              LinkedList<Instruction> RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Instruction inst = (Instruction)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(inst); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assignValues ::= ID EQUALS assignValue SEMICOLON 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new Assignment(id, value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("assignValues",14, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignValue ::= IDLITERAL 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 new Operation(value, OperationType.LITERAL); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("assignValue",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignValue ::= operation 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("assignValue",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignValue ::= relationalOp 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("assignValue",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relationalOp ::= integerValue COMPARATION integerValue 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.COMPARATION); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // relationalOp ::= integerValue LESSEQUALSTHAN integerValue 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.LESS_EQUAL_THAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // relationalOp ::= integerValue MOREEQUALSTHAN integerValue 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.GREATER_EQUAL_THAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relationalOp ::= integerValue LESSTHAN integerValue 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.LESS_THAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relationalOp ::= integerValue MORETHAN integerValue 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.GREATER_THAN); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // integerValue ::= INTEGER 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerValue",24, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // integerValue ::= ID 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value, OperationType.ID); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerValue",24, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // loop ::= WHILE PARENTHESISO conditions PARENTHESISC CURLYBRACKETO instruction CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new While(conditions, instList); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("loop",16, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // loop ::= WHILE PARENTHESISO conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 RESULT = new While(conditions, null); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("loop",16, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditions ::= ID OR conditions 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(id, OperationType.ID), value, OperationType.OR); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditions ::= relationalOp OR conditions 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.OR); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditions ::= TRUE OR conditions 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Boolean value1 = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1), value2, OperationType.OR); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditions ::= FALSE OR conditions 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Boolean value1 = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1), value2, OperationType.OR); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditions ::= ID AND conditions 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(id, OperationType.ID), value, OperationType.AND); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditions ::= relationalOp AND conditions 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Operation value1 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value1, value2, OperationType.AND); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditions ::= TRUE AND conditions 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Boolean value1 = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1), value2, OperationType.AND); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conditions ::= FALSE AND conditions 
            {
              Operation RESULT =null;
		int value1left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int value1right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		Boolean value1 = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value2 = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(new Operation(value1), value2, OperationType.AND); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditions ::= ID 
            {
              Operation RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(id, OperationType.ID); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditions ::= relationalOp 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Operation value = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditions ::= TRUE 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conditions ::= FALSE 
            {
              Operation RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = new Operation(value); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO instruction CURLYBRACKETC ELSE CURLYBRACKETO instruction CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-8)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-8)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-8)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).value;
		int elseListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int elseListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		LinkedList<Instruction> elseList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new If(conditions, instList, elseList); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-10)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC ELSE CURLYBRACKETO instruction CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)).value;
		int elseListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int elseListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		LinkedList<Instruction> elseList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new If(conditions, null, elseList); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-9)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO instruction CURLYBRACKETC ELSE CURLYBRACKETO CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		 RESULT = new If(conditions, instList, null); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-9)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC ELSE CURLYBRACKETO CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)).value;
		 RESULT = new If(conditions, null, null); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-8)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO instruction CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		int instListleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int instListright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		LinkedList<Instruction> instList = (LinkedList<Instruction>)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 RESULT = new If(conditions, instList); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO CURLYBRACKETC 
            {
              Instruction RESULT =null;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		Operation conditions = (Operation)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 RESULT = new If(conditions, null); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PaintFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PaintFileParser$do_action(
    int                        CUP$PaintFileParser$act_num,
    java_cup.runtime.lr_parser CUP$PaintFileParser$parser,
    java.util.Stack            CUP$PaintFileParser$stack,
    int                        CUP$PaintFileParser$top)
    throws java.lang.Exception
    {
              return CUP$PaintFileParser$do_action_part00000000(
                               CUP$PaintFileParser$act_num,
                               CUP$PaintFileParser$parser,
                               CUP$PaintFileParser$stack,
                               CUP$PaintFileParser$top);
    }
}

}
