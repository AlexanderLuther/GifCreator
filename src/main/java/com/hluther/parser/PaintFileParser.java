
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.hluther.parser;

import java_cup.runtime.*;
import com.hluther.gui.GifCreatorFrame;
import com.hluther.lexer.PaintFileLexer;
import com.hluther.controlClasses.PaintFileDriver;
import com.hluther.entityClasses.Canvas;
import com.hluther.entityClasses.Data;
import com.hluther.entityClasses.TemporalData;
import java.util.ArrayList;
import java.util.Hashtable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class PaintFileParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return PaintSym.class;
}

  /** Default constructor. */
  @Deprecated
  public PaintFileParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public PaintFileParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PaintFileParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\011\000\002\005\005\000\002\005" +
    "\005\000\002\005\007\000\002\005\007\000\002\005\007" +
    "\000\002\005\011\000\002\006\005\000\002\006\005\000" +
    "\002\006\007\000\002\006\007\000\002\006\007\000\002" +
    "\006\011\000\002\007\005\000\002\010\005\000\002\014" +
    "\003\000\002\014\003\000\002\011\005\000\002\034\003" +
    "\000\002\034\003\000\002\013\005\000\002\013\007\000" +
    "\002\013\005\000\002\013\003\000\002\013\005\000\002" +
    "\013\003\000\002\012\005\000\002\012\007\000\002\012" +
    "\005\000\002\012\003\000\002\012\005\000\002\012\003" +
    "\000\002\015\005\000\002\015\007\000\002\015\005\000" +
    "\002\015\003\000\002\015\005\000\002\015\003\000\002" +
    "\036\005\000\002\036\005\000\002\036\003\000\002\035" +
    "\005\000\002\035\005\000\002\035\003\000\002\037\003" +
    "\000\002\037\003\000\002\016\012\000\002\016\011\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\021\015\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\006\000\002\025\003\000\002\025\003\000\002" +
    "\026\011\000\002\027\012\000\002\030\006\000\002\030" +
    "\002\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\023\005\001\002\000\004\002\311\001" +
    "\002\000\004\021\006\001\002\000\010\005\015\006\010" +
    "\007\014\001\002\000\012\005\015\006\010\007\014\022" +
    "\ufffb\001\002\000\004\004\253\001\002\000\012\005\015" +
    "\006\010\007\014\022\ufffc\001\002\000\004\022\107\001" +
    "\002\000\012\005\015\006\010\007\014\022\ufffa\001\002" +
    "\000\004\004\051\001\002\000\004\004\016\001\002\000" +
    "\010\012\041\013\040\014\037\001\002\000\006\013\021" +
    "\014\020\001\002\000\004\004\022\001\002\000\012\005" +
    "\ufff8\006\ufff8\007\ufff8\022\ufff8\001\002\000\010\012\031" +
    "\013\uffdd\014\030\001\002\000\004\013\027\001\002\000" +
    "\006\013\uffdb\014\025\001\002\000\004\004\022\001\002" +
    "\000\004\013\uffde\001\002\000\012\005\ufff5\006\ufff5\007" +
    "\ufff5\022\ufff5\001\002\000\004\004\022\001\002\000\006" +
    "\004\032\046\033\001\002\000\006\013\uffdc\014\034\001" +
    "\002\000\006\013\uffe7\014\uffe7\001\002\000\004\004\022" +
    "\001\002\000\004\013\uffdf\001\002\000\004\013\uffe0\001" +
    "\002\000\004\004\022\001\002\000\012\005\ufff9\006\ufff9" +
    "\007\ufff9\022\ufff9\001\002\000\006\004\042\046\033\001" +
    "\002\000\006\013\044\014\043\001\002\000\004\004\022" +
    "\001\002\000\012\005\ufff7\006\ufff7\007\ufff7\022\ufff7\001" +
    "\002\000\004\013\046\001\002\000\012\005\ufff4\006\ufff4" +
    "\007\ufff4\022\ufff4\001\002\000\004\013\050\001\002\000" +
    "\012\005\ufff6\006\ufff6\007\ufff6\022\ufff6\001\002\000\010" +
    "\012\076\013\075\014\074\001\002\000\006\013\054\014" +
    "\053\001\002\000\004\004\056\001\002\000\012\005\uffec" +
    "\006\uffec\007\uffec\022\uffec\001\002\000\004\013\073\001" +
    "\002\000\010\012\063\013\uffd1\014\062\001\002\000\006" +
    "\013\uffcf\014\060\001\002\000\004\004\056\001\002\000" +
    "\004\013\uffd2\001\002\000\004\004\056\001\002\000\010" +
    "\004\064\047\065\050\066\001\002\000\006\013\uffd0\014" +
    "\070\001\002\000\006\013\uffe2\014\uffe2\001\002\000\006" +
    "\013\uffe1\014\uffe1\001\002\000\006\013\uffe3\014\uffe3\001" +
    "\002\000\004\004\056\001\002\000\004\013\uffd3\001\002" +
    "\000\004\013\uffd4\001\002\000\012\005\uffe9\006\uffe9\007" +
    "\uffe9\022\uffe9\001\002\000\004\004\056\001\002\000\012" +
    "\005\uffed\006\uffed\007\uffed\022\uffed\001\002\000\010\004" +
    "\077\047\065\050\066\001\002\000\006\013\101\014\100" +
    "\001\002\000\004\004\056\001\002\000\012\005\uffeb\006" +
    "\uffeb\007\uffeb\022\uffeb\001\002\000\004\013\103\001\002" +
    "\000\012\005\uffe8\006\uffe8\007\uffe8\022\uffe8\001\002\000" +
    "\004\013\105\001\002\000\012\005\uffea\006\uffea\007\uffea" +
    "\022\uffea\001\002\000\004\022\ufffd\001\002\000\004\024" +
    "\111\001\002\000\004\002\000\001\002\000\004\025\112" +
    "\001\002\000\004\004\113\001\002\000\004\026\114\001" +
    "\002\000\004\021\115\001\002\000\010\030\122\031\121" +
    "\037\123\001\002\000\004\022\250\001\002\000\014\022" +
    "\uffbd\030\122\031\121\033\uffbd\037\123\001\002\000\014" +
    "\022\uffbe\030\122\031\121\033\uffbe\037\123\001\002\000" +
    "\004\025\240\001\002\000\004\025\200\001\002\000\004" +
    "\025\130\001\002\000\014\022\uffc0\030\122\031\121\033" +
    "\uffc0\037\123\001\002\000\014\022\uffbf\030\122\031\121" +
    "\033\uffbf\037\123\001\002\000\006\022\uffc3\033\uffc3\001" +
    "\002\000\006\022\uffc4\033\uffc4\001\002\000\012\004\132" +
    "\046\131\047\134\050\135\001\002\000\026\014\uffb6\026" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\001\002\000\024\026\uffac\034\152\035" +
    "\153\036\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\001\002\000\016\036\162\041\161\042\164\043\166\044" +
    "\165\045\163\001\002\000\010\026\uffaa\034\152\035\153" +
    "\001\002\000\010\026\uffa9\034\152\035\153\001\002\000" +
    "\010\026\uffab\034\152\035\153\001\002\000\004\026\140" +
    "\001\002\000\004\032\141\001\002\000\010\030\122\031" +
    "\121\037\123\001\002\000\004\033\143\001\002\000\016" +
    "\022\uffb1\030\uffb1\031\uffb1\033\uffb1\037\uffb1\040\144\001" +
    "\002\000\004\032\146\001\002\000\014\022\uffb3\030\uffb3" +
    "\031\uffb3\033\uffb3\037\uffb3\001\002\000\010\030\122\031" +
    "\121\037\123\001\002\000\004\033\150\001\002\000\014" +
    "\022\uffb2\030\uffb2\031\uffb2\033\uffb2\037\uffb2\001\002\000" +
    "\012\004\132\046\131\047\134\050\135\001\002\000\012" +
    "\004\uffa8\046\uffa8\047\uffa8\050\uffa8\001\002\000\012\004" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\001\002\000\004\026\uffaf" +
    "\001\002\000\012\004\132\046\131\047\134\050\135\001" +
    "\002\000\004\026\uffad\001\002\000\012\004\132\046\131" +
    "\047\134\050\135\001\002\000\004\026\uffae\001\002\000" +
    "\006\004\167\046\131\001\002\000\006\004\167\046\131" +
    "\001\002\000\006\004\167\046\131\001\002\000\006\004" +
    "\167\046\131\001\002\000\006\004\167\046\131\001\002" +
    "\000\006\004\167\046\131\001\002\000\012\014\uffb5\026" +
    "\uffb5\034\uffb5\035\uffb5\001\002\000\010\026\uffa2\034\uffa2" +
    "\035\uffa2\001\002\000\010\026\uffa3\034\uffa3\035\uffa3\001" +
    "\002\000\010\026\uffa4\034\uffa4\035\uffa4\001\002\000\010" +
    "\026\uffa1\034\uffa1\035\uffa1\001\002\000\010\026\uffa6\034" +
    "\uffa6\035\uffa6\001\002\000\010\026\uffa5\034\uffa5\035\uffa5" +
    "\001\002\000\012\004\132\046\131\047\134\050\135\001" +
    "\002\000\004\026\uffb0\001\002\000\006\004\201\011\203" +
    "\001\002\000\004\014\uffba\001\002\000\004\014\204\001" +
    "\002\000\004\014\uffbb\001\002\000\006\004\201\011\203" +
    "\001\002\000\004\014\206\001\002\000\006\004\207\046" +
    "\210\001\002\000\020\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\026\uffc7\027\uffb5\001\002\000\020\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\026\uffc8\027\uffb6\001\002" +
    "\000\012\014\uffb9\015\234\016\235\026\uffb9\001\002\000" +
    "\016\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\026\uffc9" +
    "\001\002\000\004\027\231\001\002\000\016\014\uffcc\015" +
    "\uffcc\016\uffcc\017\223\020\224\026\uffcc\001\002\000\004" +
    "\014\217\001\002\000\006\014\uffb8\026\uffb8\001\002\000" +
    "\006\004\207\046\210\001\002\000\004\026\221\001\002" +
    "\000\004\013\222\001\002\000\014\022\uffbc\030\uffbc\031" +
    "\uffbc\033\uffbc\037\uffbc\001\002\000\006\004\225\046\226" +
    "\001\002\000\006\004\225\046\226\001\002\000\016\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\026\uffc7\001\002" +
    "\000\016\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\026" +
    "\uffc8\001\002\000\016\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\026\uffca\001\002\000\016\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\026\uffcb\001\002\000\004\027\232" +
    "\001\002\000\006\004\167\046\131\001\002\000\006\014" +
    "\uffb7\026\uffb7\001\002\000\006\004\225\046\226\001\002" +
    "\000\006\004\225\046\226\001\002\000\016\014\uffcd\015" +
    "\uffcd\016\uffcd\017\223\020\224\026\uffcd\001\002\000\016" +
    "\014\uffce\015\uffce\016\uffce\017\223\020\224\026\uffce\001" +
    "\002\000\012\004\132\046\131\047\134\050\135\001\002" +
    "\000\004\026\242\001\002\000\004\032\243\001\002\000" +
    "\010\030\122\031\121\037\123\001\002\000\004\033\245" +
    "\001\002\000\014\022\uffb4\030\uffb4\031\uffb4\033\uffb4\037" +
    "\uffb4\001\002\000\006\022\uffc2\033\uffc2\001\002\000\006" +
    "\022\uffc1\033\uffc1\001\002\000\006\002\uffc5\024\111\001" +
    "\002\000\004\002\uffc6\001\002\000\004\022\uffff\001\002" +
    "\000\010\012\300\013\277\014\276\001\002\000\006\013" +
    "\256\014\255\001\002\000\004\004\257\001\002\000\012" +
    "\005\ufff2\006\ufff2\007\ufff2\022\ufff2\001\002\000\010\012" +
    "\266\013\uffd7\014\265\001\002\000\004\013\264\001\002" +
    "\000\006\013\uffd5\014\262\001\002\000\004\004\257\001" +
    "\002\000\004\013\uffd8\001\002\000\012\005\uffef\006\uffef" +
    "\007\uffef\022\uffef\001\002\000\004\004\257\001\002\000" +
    "\010\004\270\010\271\011\272\001\002\000\006\013\uffe6" +
    "\014\uffe6\001\002\000\006\013\uffd6\014\273\001\002\000" +
    "\006\013\uffe5\014\uffe5\001\002\000\006\013\uffe4\014\uffe4" +
    "\001\002\000\004\004\257\001\002\000\004\013\uffd9\001" +
    "\002\000\004\013\uffda\001\002\000\004\004\257\001\002" +
    "\000\012\005\ufff3\006\ufff3\007\ufff3\022\ufff3\001\002\000" +
    "\010\004\301\010\271\011\272\001\002\000\006\013\303" +
    "\014\302\001\002\000\004\004\257\001\002\000\012\005" +
    "\ufff1\006\ufff1\007\ufff1\022\ufff1\001\002\000\004\013\305" +
    "\001\002\000\012\005\uffee\006\uffee\007\uffee\022\uffee\001" +
    "\002\000\004\013\307\001\002\000\012\005\ufff0\006\ufff0" +
    "\007\ufff0\022\ufff0\001\002\000\004\022\ufffe\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\011\004\010\005\006\006\012" +
    "\001\001\000\012\003\307\004\010\005\006\006\012\001" +
    "\001\000\004\010\253\001\001\000\012\003\251\004\010" +
    "\005\006\006\012\001\001\000\002\001\001\000\012\003" +
    "\105\004\010\005\006\006\012\001\001\000\004\011\051" +
    "\001\001\000\004\007\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\023\013\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\023\013\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\023\013\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\023\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\023\013\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\023\013" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\056\015\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\056\015\060\001\001\000\002" +
    "\001\001\000\006\011\056\015\071\001\001\000\004\034" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\056\015\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\056\015\103\001\001\000\002\001\001\000" +
    "\004\034\066\001\001\000\002\001\001\000\006\011\056" +
    "\015\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\115\020\123\021\124\026\116\027" +
    "\117\001\001\000\002\001\001\000\014\017\246\020\123" +
    "\021\124\026\116\027\117\001\001\000\014\017\245\020" +
    "\123\021\124\026\116\027\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\126\020" +
    "\123\021\124\026\116\027\117\001\001\000\014\017\125" +
    "\020\123\021\124\026\116\027\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\132\031\136\033\135" +
    "\001\001\000\002\001\001\000\004\032\175\001\001\000" +
    "\002\001\001\000\004\032\156\001\001\000\004\032\154" +
    "\001\001\000\004\032\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\141\020\123\021\124\026\116" +
    "\027\117\001\001\000\002\001\001\000\004\030\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\146" +
    "\020\123\021\124\026\116\027\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\132\031\153\033\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\132\031\155\033\135\001\001\000\002" +
    "\001\001\000\010\025\132\031\157\033\135\001\001\000" +
    "\002\001\001\000\004\025\174\001\001\000\004\025\173" +
    "\001\001\000\004\025\172\001\001\000\004\025\171\001" +
    "\001\000\004\025\170\001\001\000\004\025\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\132\031\176\033\135\001\001\000" +
    "\002\001\001\000\004\022\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\204\001" +
    "\001\000\002\001\001\000\016\023\214\024\215\025\212" +
    "\035\213\036\210\037\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\217\024\215\025\212\035\213\036\210" +
    "\037\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\227\001\001\000\004\037\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\232" +
    "\001\001\000\002\001\001\000\006\035\236\037\211\001" +
    "\001\000\006\035\235\037\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\132\031\240\033\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\243" +
    "\020\123\021\124\026\116\027\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\260" +
    "\012\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\260\012\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\260\012\274\001\001\000\004\014\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\260\012\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\260\012\305\001\001\000" +
    "\002\001\001\000\004\014\266\001\001\000\002\001\001" +
    "\000\006\010\260\012\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PaintFileParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PaintFileParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PaintFileParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private GifCreatorFrame gifCreatorFrame;
    private PaintFileDriver paintFileDriver;
    private Hashtable<String, Canvas> canvasTable;
    private Hashtable<String, Data> symbolTable;
    private ArrayList<TemporalData> temporalData;
    private Data data;
    
    public PaintFileParser(PaintFileLexer lexer, GifCreatorFrame gifCreatorFrame, PaintFileDriver paintFileDriver, Hashtable<String, Canvas> canvasTable) { 
        super(lexer);
        this.gifCreatorFrame = gifCreatorFrame;
        this.paintFileDriver = paintFileDriver;
        this.canvasTable = canvasTable;
        this.symbolTable = new Hashtable<>();
        this.temporalData = new ArrayList<>();
    }

    public void syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    }

    public void unrecovered_syntax_error(Symbol s){
        //konquestFrame.printGameSaveSintaxError(s);
    } 

    public void semanticError(String lexeme, int line, int column, int errorType){
        String msg = "";    
        switch(errorType){
            case 0:
                msg = "Error Semantico -> Ya existe una variable con el nombre ["+lexeme+"]. Linea: "+line+" Columna: "+column; 
            break;
            case 1:
                msg = "Error Semantico -> No existe ninguna variable con el nombre  ["+lexeme+"]. Imposible asignar un valor. Linea: "+line+" Columna: "+column; 
            break;
        }
        gifCreatorFrame.printError(msg, 3);
    }


    public void addEmptyVar(String id, int type, int row, int column){
        if(existVar(id)){
            data = new Data(id, type, true);
            symbolTable.put(id, data);
        }
        else{
             semanticError(id, row, column, 0);
        }
    }
    
    public void addVar(String newId, String id, int type, int newIdRow, int newIdColumn, int idRow, int idColumn){
        if(existVar(newId)){
            temporalData.add(new TemporalData(newId, id, idRow, idColumn, type));
        }
        else{
            semanticError(id, newIdRow, newIdColumn, 0);
        }
    }

    public boolean existVar(String id){
        return symbolTable.get(id) == null;  
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$PaintFileParser$actions {
  private final PaintFileParser parser;

  /** Constructor */
  CUP$PaintFileParser$actions(PaintFileParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$PaintFileParser$do_action_part00000000(
    int                        CUP$PaintFileParser$act_num,
    java_cup.runtime.lr_parser CUP$PaintFileParser$parser,
    java.util.Stack            CUP$PaintFileParser$stack,
    int                        CUP$PaintFileParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PaintFileParser$result;

      /* select the action based on the action number */
      switch (CUP$PaintFileParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= varStructure EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		RESULT = start_val;
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PaintFileParser$parser.done_parsing();
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // varStructure ::= VARS SQUAREBRACKETO vars SQUAREBRACKETC instructions 
            {
              Object RESULT =null;
		 paintFileDriver.createData(symbolTable, temporalData, gifCreatorFrame);  System.out.println("VARIABLES"); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("varStructure",0, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // vars ::= intType vars 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // vars ::= stringType vars 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // vars ::= booleanType vars 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // vars ::= intType 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // vars ::= stringType 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // vars ::= booleanType 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("vars",1, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // intType ::= INT ID SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 addEmptyVar(name, 0, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intType",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // intType ::= INT integerInitialization SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intType",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // intType ::= INT ID EQUALS ID SEMICOLON 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 addVar(newName, name, 0, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intType",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // intType ::= INT ID COMMA integerList SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 addEmptyVar(name, 0, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intType",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // intType ::= INT integerInitialization COMMA integerList SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intType",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // intType ::= INT ID EQUALS ID COMMA integerList SEMICOLON 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 addVar(newName, name, 0, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intType",2, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stringType ::= STRING ID SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 addEmptyVar(name, 1, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringType",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stringType ::= STRING stringInitialization SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringType",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stringType ::= STRING ID EQUALS ID SEMICOLON 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 addVar(newName, name, 1, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringType",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stringType ::= STRING ID COMMA stringList SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addEmptyVar(name, 1, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringType",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stringType ::= STRING stringInitialization COMMA stringList SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringType",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stringType ::= STRING ID EQUALS ID COMMA stringList SEMICOLON 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 addVar(newName, name, 1, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringType",3, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // booleanType ::= BOOLEAN ID SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 addEmptyVar(name, 2, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanType",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // booleanType ::= BOOLEAN booleanInitialization SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanType",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // booleanType ::= BOOLEAN ID EQUALS ID SEMICOLON 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)).value;
		 addVar(newName, name, 2, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanType",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // booleanType ::= BOOLEAN ID COMMA booleanList SEMICOLON 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 addEmptyVar(name, 2, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanType",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // booleanType ::= BOOLEAN booleanInitialization COMMA booleanList SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanType",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // booleanType ::= BOOLEAN ID EQUALS ID COMMA booleanList SEMICOLON 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)).value;
		 addVar(newName, name, 2, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanType",4, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // integerInitialization ::= ID EQUALS INTEGER 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int amountleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int amountright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Integer amount = (Integer)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		  if(existVar(name)){
                                    data = new Data(name, amount, 0, false);
                                    symbolTable.put(name, data);
                                }
                                else semanticError(name, nameleft, nameright, 0);
                            
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerInitialization",5, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stringInitialization ::= ID EQUALS stringValue 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		  if(existVar(name)){
                                 //   data = new Data(name, value.replaceAll("\"", ""), 1, false);
                                   // symbolTable.put(name, data);
                                }
                                else semanticError(name, nameleft, nameright, 0);
                            
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringInitialization",6, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stringValue ::= STRINGLITERAL 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringValue",10, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stringValue ::= IDLITERAL 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringValue",10, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // booleanInitialization ::= ID EQUALS booleanValue 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		  if(existVar(name)){
                                    data = new Data(name, value, 2, false);
                                    symbolTable.put(name, data);
                                }
                                else semanticError(name, nameleft, nameright, 0);
                            
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanInitialization",7, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // booleanValue ::= TRUE 
            {
              Boolean RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanValue",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // booleanValue ::= FALSE 
            {
              Boolean RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanValue",26, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // integerList ::= ID COMMA integerList 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addEmptyVar(name, 0, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerList",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // integerList ::= ID EQUALS ID COMMA integerList 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addVar(newName, name, 0, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerList",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // integerList ::= integerInitialization COMMA integerList 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerList",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // integerList ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 addEmptyVar(name, 0, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerList",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // integerList ::= ID EQUALS ID 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 addVar(newName, name, 0, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerList",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // integerList ::= integerInitialization 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerList",9, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stringList ::= ID COMMA stringList 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addEmptyVar(name, 1, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringList",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stringList ::= ID EQUALS ID COMMA stringList 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addVar(newName, name, 1, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringList",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stringList ::= stringInitialization COMMA stringList 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringList",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stringList ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 addEmptyVar(name, 1, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringList",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stringList ::= ID EQUALS ID 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 addVar(newName, name, 1, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringList",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stringList ::= stringInitialization 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringList",8, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // booleanList ::= ID COMMA booleanList 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addEmptyVar(name, 2, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanList",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // booleanList ::= ID EQUALS ID COMMA booleanList 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		 addVar(newName, name, 2, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanList",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-4)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // booleanList ::= booleanInitialization COMMA booleanList 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanList",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // booleanList ::= ID 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 addEmptyVar(name, 2, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanList",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // booleanList ::= ID EQUALS ID 
            {
              Object RESULT =null;
		int newNameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).left;
		int newNameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).right;
		String newName = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$PaintFileParser$stack.peek()).value;
		 addVar(newName, name, 2, newNameleft, newNameright, nameleft, nameright); 
              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanList",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // booleanList ::= booleanInitialization 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("booleanList",11, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operation ::= operation PLUS term 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("operation",28, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operation ::= operation MINUS term 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("operation",28, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operation ::= term 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("operation",28, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term MULTIPLICATION factor 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= term DIVISION factor 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("term",27, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= INTEGER 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= ID 
            {
              Integer RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instructions ::= INSTRUCTIONS PARENTHESISO ID PARENTHESISC SQUAREBRACKETO instruction SQUAREBRACKETC instructions 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instructions",12, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instructions ::= INSTRUCTIONS PARENTHESISO ID PARENTHESISC SQUAREBRACKETO instruction SQUAREBRACKETC 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instructions",12, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruction ::= assignValues instruction 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruction ::= paint instruction 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruction ::= conditional instruction 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruction ::= loop instruction 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-1)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruction ::= assignValues 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruction ::= paint 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruction ::= conditional 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruction ::= loop 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paint ::= PAINT PARENTHESISO stringParam COMMA stringParam COMMA intParam COMMA intParam PARENTHESISC SEMICOLON 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("paint",15, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-10)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stringParam ::= IDLITERAL 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringParam",16, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stringParam ::= ID 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("stringParam",16, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // intParam ::= operation 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intParam",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // intParam ::= rank 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("intParam",17, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // rank ::= integerValue FULLSTOP FULLSTOP integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("rank",18, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // integerValue ::= INTEGER 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerValue",19, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // integerValue ::= ID 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("integerValue",19, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // loop ::= WHILE PARENTHESISO conditions PARENTHESISC CURLYBRACKETO instruction CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("loop",20, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-6)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional ::= IF PARENTHESISO conditions PARENTHESISC CURLYBRACKETO instruction CURLYBRACKETC else 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditional",21, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-7)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else ::= ELSE CURLYBRACKETO instruction CURLYBRACKETC 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-3)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // else ::= 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("else",22, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conditions ::= ID logicalOp conditions 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conditions ::= relationalOp logicalOp conditions 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conditions ::= TRUE logicalOp conditions 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conditions ::= FALSE logicalOp conditions 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conditions ::= ID 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conditions ::= relationalOp 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conditions ::= TRUE 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conditions ::= FALSE 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("conditions",23, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // logicalOp ::= AND 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("logicalOp",24, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // logicalOp ::= OR 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("logicalOp",24, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relationalOp ::= integerValue COMPARATION integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // relationalOp ::= integerValue LESSEQUALSTHAN integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // relationalOp ::= integerValue MOREEQUALSTHAN integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // relationalOp ::= integerValue LESSTHAN integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // relationalOp ::= integerValue MORETHAN integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // relationalOp ::= integerValue BETWEEN integerValue 
            {
              Object RESULT =null;

              CUP$PaintFileParser$result = parser.getSymbolFactory().newSymbol("relationalOp",25, ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.elementAt(CUP$PaintFileParser$top-2)), ((java_cup.runtime.Symbol)CUP$PaintFileParser$stack.peek()), RESULT);
            }
          return CUP$PaintFileParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$PaintFileParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$PaintFileParser$do_action(
    int                        CUP$PaintFileParser$act_num,
    java_cup.runtime.lr_parser CUP$PaintFileParser$parser,
    java.util.Stack            CUP$PaintFileParser$stack,
    int                        CUP$PaintFileParser$top)
    throws java.lang.Exception
    {
              return CUP$PaintFileParser$do_action_part00000000(
                               CUP$PaintFileParser$act_num,
                               CUP$PaintFileParser$parser,
                               CUP$PaintFileParser$stack,
                               CUP$PaintFileParser$top);
    }
}

}
